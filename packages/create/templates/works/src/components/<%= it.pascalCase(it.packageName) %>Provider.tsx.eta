<% if (it.hasReact) { -%>
import {createContext, useContext, useState, useCallback, useMemo} from 'react'
import type {ReactNode} from 'react'
import type {<%= it.pascalCase(it.packageName) %>Options} from '../types.js'

/**
 * Context value for <%= it.pascalCase(it.packageName) %> provider.
 */
export interface <%= it.pascalCase(it.packageName) %>ContextValue {
  /** Configuration options */
  config: <%= it.pascalCase(it.packageName) %>Options
  /** Update configuration */
  updateConfig: (updates: Partial<<%= it.pascalCase(it.packageName) %>Options>) => void
}

/**
 * Props for the <%= it.pascalCase(it.packageName) %>Provider.
 */
export interface <%= it.pascalCase(it.packageName) %>ProviderProps {
  /** Initial configuration */
  config?: <%= it.pascalCase(it.packageName) %>Options
  /** Child components */
  children: ReactNode
}

/**
 * React context for <%= it.capitalizeFirst(it.packageName) %> configuration.
 */
const <%= it.pascalCase(it.packageName) %>Context = createContext<<%= it.pascalCase(it.packageName) %>ContextValue | null>(null)

/**
 * Provider component for <%= it.capitalizeFirst(it.packageName) %> context.
 *
 * @example
 * ```tsx
 * import {<%= it.pascalCase(it.packageName) %>Provider} from '@bfra.me/<%= it.packageName %>'
 *
 * function App() {
 *   return (
 *     <<%= it.pascalCase(it.packageName) %>Provider config={{ debug: true }}>
 *       <YourApp />
 *     </<%= it.pascalCase(it.packageName) %>Provider>
 *   )
 * }
 * ```
 */
export function <%= it.pascalCase(it.packageName) %>Provider({
  config: initialConfig = {},
  children
}: <%= it.pascalCase(it.packageName) %>ProviderProps): JSX.Element {
  const [config, setConfig] = useState<<%= it.pascalCase(it.packageName) %>Options>(initialConfig)

  const updateConfig = useCallback((updates: Partial<<%= it.pascalCase(it.packageName) %>Options>) => {
    setConfig(prevConfig => ({
      ...prevConfig,
      ...updates
    }))
  }, [])

  const contextValue = useMemo((): <%= it.pascalCase(it.packageName) %>ContextValue => ({
    config,
    updateConfig
  }), [config, updateConfig])

  return (
    <<%= it.pascalCase(it.packageName) %>Context.Provider value={contextValue}>
      {children}
    </<%= it.pascalCase(it.packageName) %>Context.Provider>
  )
}

/**
 * Hook to access <%= it.capitalizeFirst(it.packageName) %> context.
 *
 * @returns <%= it.capitalizeFirst(it.packageName) %> context value
 * @throws Error if used outside of <%= it.pascalCase(it.packageName) %>Provider
 *
 * @example
 * ```tsx
 * function MyComponent() {
 *   const {config, updateConfig} = use<%= it.pascalCase(it.packageName) %>Context()
 *
 *   return (
 *     <button onClick={() => updateConfig({ debug: !config.debug })}>
 *       Toggle Debug: {config.debug ? 'On' : 'Off'}
 *     </button>
 *   )
 * }
 * ```
 */
export function use<%= it.pascalCase(it.packageName) %>Context(): <%= it.pascalCase(it.packageName) %>ContextValue {
  const context = useContext(<%= it.pascalCase(it.packageName) %>Context)

  if (!context) {
    throw new Error(
      'use<%= it.pascalCase(it.packageName) %>Context must be used within a <%= it.pascalCase(it.packageName) %>Provider'
    )
  }

  return context
}
<% } -%>
