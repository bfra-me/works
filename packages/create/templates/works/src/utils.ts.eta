<% if (it.packageType === 'utility') { -%>
import type {<%= it.pascalCase(it.packageName) %>Options, <%= it.pascalCase(it.packageName) %>Result} from './types.js'

/**
 * Core utility function for <%= it.capitalizeFirst(it.packageName) %>
 *
 * @param input - Input data to process
 * @param options - Configuration options
 * @returns Result of the utility operation
 *
 * @example
 * ```typescript
 * const result = await process<%= it.pascalCase(it.packageName) %>(data, { verbose: true })
 * if (result.success) {
 *   console.log('Processed:', result.data)
 * } else {
 *   console.error('Error:', result.error.message)
 * }
 * ```
 */
export async function process<%= it.pascalCase(it.packageName) %><T>(
  input: T,
  options: <%= it.pascalCase(it.packageName) %>Options = {}
): Promise<<%= it.pascalCase(it.packageName) %>Result<T>> {
  try {
    if (options.verbose) {
      console.log(`Processing <%= it.packageName %> with input:`, input)
    }

    // Validate input
    if (input === null || input === undefined) {
      throw new Error('Input cannot be null or undefined')
    }

    // Add your utility logic here
    const result = await processInternal(input, options)

    return {
      success: true,
      data: result
    }
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error : new Error(String(error))
    }
  }
}

/**
 * Validates input data for <%= it.capitalizeFirst(it.packageName) %> operations.
 *
 * @param input - Input to validate
 * @returns True if valid, throws error if invalid
 */
export function validate<%= it.pascalCase(it.packageName) %>Input<T>(input: T): input is NonNullable<T> {
  if (input === null || input === undefined) {
    throw new Error('<%= it.capitalizeFirst(it.packageName) %> input cannot be null or undefined')
  }
  return true
}

/**
 * Internal processing function.
 *
 * @internal
 * @param input - Input data
 * @param options - Processing options
 * @returns Processed result
 */
async function processInternal<T>(
  input: T,
  options: <%= it.pascalCase(it.packageName) %>Options
): Promise<T> {
  // Implement your core logic here
  // This is a placeholder implementation
  await new Promise(resolve => setTimeout(resolve, 1))
  return input
}

/**
 * Creates a default configuration for <%= it.capitalizeFirst(it.packageName) %>.
 *
 * @param overrides - Configuration overrides
 * @returns Default configuration with overrides applied
 */
export function createDefault<%= it.pascalCase(it.packageName) %>Config(
  overrides: Partial<<%= it.pascalCase(it.packageName) %>Options> = {}
): <%= it.pascalCase(it.packageName) %>Options {
  return {
    verbose: false,
    ...overrides
  }
}
 * Example validation utility
 *
 * @param value - Value to validate
 * @returns True if valid, false otherwise
 */
export function isValid(value: unknown): boolean {
  return value != null
}<% } %>
