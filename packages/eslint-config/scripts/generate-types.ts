import fs from 'node:fs/promises'
import {builtinRules} from 'eslint/use-at-your-own-risk'
import {composer} from 'eslint-flat-config-utils'
import {flatConfigsToRulesDTS} from 'eslint-typegen/core'
import type vitest from '@vitest/eslint-plugin'
import {defineConfig} from '../src/define-config'

const configs = await composer(
  defineConfig({
    plugins: {
      '': {
        rules: Object.fromEntries(builtinRules),
      },
    },
    typescript: {
      tsconfigPath: 'tsconfig.json',
    },
    vitest: true,
  }),
  // TODO: The `vitest/valid-title` rule breaks the generated types if saved as a .ts instead of a .d.ts file.
).override('@bfra.me/vitest/plugin', config => {
  const {
    plugins: {vitest: vitestPlugin},
  } = config as {plugins: {vitest: typeof vitest}}
  if (vitestPlugin.rules && 'valid-title' in vitestPlugin.rules) {
    // HACK: Remove the rule before passing the config to the type generator.
    delete (vitestPlugin.rules as {[key: string]: unknown})['valid-title']
  }
  return config
})

const rulesTypeName = 'Rules'
const configNames = configs.map(config => config.name).filter(Boolean) as string[]

let dts = await flatConfigsToRulesDTS(configs, {
  exportTypeName: rulesTypeName,
  includeAugmentation: false,
  includeIgnoreComments: false,
})

dts =
  `// This file is generated by scripts/generate-types.ts
// Do not edit this file directly.

/* eslint-disable */
` +
  dts +
  `

import type * as FCUTypes from 'eslint-flat-config-utils'

/**
 * Each configuration object contains all of the information ESLint needs to execute on a set of files.
 * @see https://eslint.org/docs/latest/use/configure/configuration-files#configuration-objects
*/
export interface Config<R extends Linter.RulesRecord = Linter.RulesRecord & ${rulesTypeName}> extends Linter.Config<R> {}

/**
 * Defines a 'composer' for ESLint flat configurations.
 * @template Config - The ESLint flat configuration type, extending Linter.Config.
 * @template ConfigNames - A literal union of all flat configurations provided by this package.
 * @see {@link ConfigNames}
 * @see https://jsr.io/@antfu/eslint-flat-config-utils/doc/~/FlatConfigComposer
 */
export type FlatConfigComposer<
  C extends Linter.Config = Config,
  ConfigNames extends string =
    ${configNames.length > 0 ? `${configNames.map(name => `'${name}'`).join(' |\n    ')}` : 'never'}
> = FCUTypes.FlatConfigComposer<C, ConfigNames>

/**
 * Represents a value that resolves to one or more ESLint flat configurations.
 * @template Config - The ESLint flat configuration type, extending Linter.Config.
 * @see https://jsr.io/@antfu/eslint-flat-config-utils/doc/~/ResolvableFlatConfig
 */
export type ResolvableFlatConfig<
  C extends Linter.Config = Config
> = FCUTypes.ResolvableFlatConfig<C>

export type * from './define-config'

`

await fs.writeFile('src/types.ts', dts)
