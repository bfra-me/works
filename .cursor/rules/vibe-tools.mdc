---
description: Global Rule. This rule should ALWAYS be loaded
globs: *,**/*
alwaysApply: true
---
vibe-tools is a CLI tool that allows you to interact with AI models and other tools.
vibe-tools is installed on this machine and it is available to you to execute. You're encouraged to use it.

Note: For more comprehensive guidance, examples, and advanced usage scenarios, refer to the [vibe-tools-playbook](mdc:docs/memory/vibe-tools-playbook.md). This playbook serves as a complete user guide, while this document provides a concise reference for AI assistants.

<vibe-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Direct Model Queries:**
`vibe-tools ask "<your question>" --provider <provider> --model <model>` - Ask any model from any provider a direct question (e.g., `vibe-tools ask "What is the capital of France?" --provider openai --model o3-mini`). Note that this command is generally less useful than other commands like `repo` or `plan` because it does not include any context from your codebase or repository. In general you should not use the ask command because it does not include any context. The other commands like `web`, `doc`, `repo`, or `plan` are usually better. If you are using it, make sure to include in your question all the information and context that the model might need to answer usefully.

**Ask Command Options:**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, modelbox, openrouter, or xai)
--model=<model>: Model to use (required for the ask command)
--reasoning-effort=<low|medium|high>: Control the depth of reasoning for supported models (OpenAI o1/o3-mini models and Claude 3.7 Sonnet). Higher values produce more thorough responses for complex questions.
--with-doc=<doc_url>: Fetch content from one or more **HTTPS** document URLs and include it as context. Can be specified multiple times (e.g., `--with-doc=https://example.com/doc1 --with-doc=https://example.com/doc2`). **Note: Local file paths are not supported with this option; for local files, include the path directly in your prompt.**

**Implementation Planning:**
`vibe-tools plan "<query>"` - Generate a focused implementation plan using AI (e.g., `vibe-tools plan "Add user authentication to the login page"`)
The plan command uses multiple AI models to:
1. Identify relevant files in your codebase (using Gemini by default)
2. Extract content from those files
3. Generate a detailed implementation plan (using OpenAI o3-mini by default)

**Plan Command Options:**
--fileProvider=<provider>: Provider for file identification (gemini, openai, anthropic, perplexity, modelbox, openrouter, or xai)
--thinkingProvider=<provider>: Provider for plan generation (gemini, openai, anthropic, perplexity, modelbox, openrouter, or xai)
--fileModel=<model>: Model to use for file identification
--thinkingModel=<model>: Model to use for plan generation
--with-doc=<doc_url>: Fetch content from one or more **HTTPS** document URLs and include it as context for both file identification and planning. Can be specified multiple times (e.g., `--with-doc=https://example.com/spec1 --with-doc=https://example.com/spec2`). **Note: Local file paths are not supported; for local files, include the path in your query.**

**Web Search:**
`vibe-tools web "<your question>"` - Get answers from the web using a provider that supports web search (e.g., Perplexity models and Gemini Models either directly or from OpenRouter or ModelBox) (e.g., `vibe-tools web "latest shadcn/ui installation instructions"`)
Note: web is a smart autonomous agent with access to the internet and an extensive up to date knowledge base. Web is NOT a web search engine. Always ask the agent for what you want using a proper sentence, do not just send it a list of keywords. In your question to web include the context and the goal that you're trying to acheive so that it can help you most effectively.
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md. However if user provides a specific url, you should always use any command with --with-doc instead of web.

**Web Command Options:**
--provider=<provider>: AI provider to use (perplexity, gemini, modelbox, or openrouter)

**Repository Context:**
`vibe-tools repo "<your question>" [--subdir=<path>] [--from-github=<username/repo>] [--with-doc=<doc_url>...]` - Get context-aware answers about this repository using Google Gemini (e.g., `vibe-tools repo "explain authentication flow"`)
Use the optional `--subdir` parameter to analyze a specific subdirectory instead of the entire repository (e.g., `vibe-tools repo "explain the code structure" --subdir=src/components`). Use the optional `--from-github` parameter to analyze a remote GitHub repository without cloning it locally (e.g., `vibe-tools repo "explain the authentication system" --from-github=username/repo-name`). Use the optional `--with-doc` parameter multiple times to include content from several **HTTPS** URLs as additional context (e.g., `vibe-tools repo "summarize findings" --with-doc=https://example.com/spec1 --with-doc=https://example.com/spec2`). **Note: Local file paths are not supported with this option; for local files, include the path directly in your prompt.**

**Documentation Generation:**
`vibe-tools doc [options] [--with-doc=<doc_url>...]` - Generate comprehensive documentation for this repository (e.g., `vibe-tools doc --output docs.md`). Can incorporate document context from multiple **HTTPS** URLs (e.g., `vibe-tools doc --with-doc=https://example.com/existing-docs --with-doc=https://example.com/new-spec`). **Note: Local file paths are not supported with this option; for local files, ensure your main prompt or query references the local file paths if their content is to be considered for documentation (e.g., `vibe-tools doc "Generate documentation based on the specifications in ./docs/specs/feature-x.md"`).**

**YouTube Video Analysis:**
`vibe-tools youtube "<youtube-url>" [question] [--type=<summary|transcript|plan|review|custom>]` - Analyze YouTube videos and generate detailed reports (e.g., `vibe-tools youtube "https://youtu.be/43c-Sm5GMbc" --type=summary`)
Note: The YouTube command requires a `GEMINI_API_KEY` to be set in your environment or .vibe-tools.env file as the GEMINI API is the only interface that supports YouTube analysis.

**GitHub Information:**
`vibe-tools github pr [number]` - Get information about GitHub pull requests. Without a number, lists the 10 most recent open pull requests in the repository. With a specific PR number, displays detailed information about that pull request including title, description, comments, labels, and status (e.g., `vibe-tools github pr 123`)
`vibe-tools github issue [number]` - Get information about GitHub issues. Without a number, lists the 10 most recent open issues in the repository. With a specific issue number, displays detailed information about that issue including title, description, comments, labels, and status (e.g., `vibe-tools github issue 456`)

**ClickUp Information:**
`vibe-tools clickup task <task_id>` - Get detailed information about a ClickUp task including description, comments, status, assignees, and metadata (e.g., `vibe-tools clickup task "task_id"`)

**Model Context Protocol (MCP) Commands:**
Use the following commands to interact with MCP servers and their specialized tools:
`vibe-tools mcp search "<query>"` - Search the MCP Marketplace for available servers that match your needs (e.g., `vibe-tools mcp search "git repository management"`)
`vibe-tools mcp run "<query>"` - Execute MCP server tools using natural language queries (e.g., `vibe-tools mcp run "list files in the current directory" --provider=openrouter`). The query must include sufficient information for vibe-tools to determine which server to use, provide plenty of context.

The `search` command helps you discover servers in the MCP Marketplace based on their capabilities and your requirements. The `run` command automatically selects and executes appropriate tools from these servers based on your natural language queries. If you want to use a specific server include the server name in your query. E.g. `vibe-tools mcp run "using the mcp-server-sqlite list files in directory --provider=openrouter"`

**Notes on MCP Commands:**
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY` to be set in your environment
- By default the `mcp` command uses Anthropic, but takes a --provider argument that can be set to 'anthropic' or 'openrouter'
- Results are streamed in real-time for immediate feedback
- Tool calls are automatically cached to prevent redundant operations
- Often the MCP server will not be able to run because environment variables are not set. If this happens ask the user to add the missing environment variables to the cursor tools env file at ~/.vibe-tools/.env

**Stagehand Browser Automation:**
`vibe-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `vibe-tools browser open "https://example.com" --html`)
`vibe-tools browser act "<instruction>" --url=<url | 'current'> [options]` - Execute actions on a webpage using natural language instructions (e.g., `vibe-tools browser act "Click Login" --url=https://example.com`)
`vibe-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `vibe-tools browser observe "interactive elements" --url=https://example.com`)
`vibe-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `vibe-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless unless --connect-to is used to connect to a long-lived interactive session. In disconnected mode each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
  - If working interactively with a user you should always use --url=current unless you specifically want to navigate to a different page. Setting the url to anything else will cause a page refresh loosing current state.
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `vibe-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `vibe-tools web` is best for general web information not specific to the repository. Generally call this without additional arguments.
- `vibe-tools repo` is ideal for repository-specific questions, planning, code review and debugging. E.g. `vibe-tools repo "Review recent changes to command error handling looking for mistakes, omissions and improvements"`. Generally call this without additional arguments.
- `vibe-tools plan` is ideal for planning tasks. E.g. `vibe-tools plan "Adding authentication with social login using Google and Github"`. Generally call this without additional arguments.
- `vibe-tools doc` generates documentation for local or remote repositories.
- `vibe-tools youtube` analyzes YouTube videos to generate summaries, transcripts, implementation plans, or custom analyses
- `vibe-tools browser` is useful for testing and debugging web apps and uses Stagehand
- `vibe-tools mcp` enables interaction with specialized tools through MCP servers (e.g., for Git operations, file system tasks, or custom tools)
- When implementing features based on documentation, specifications, or any external content, always use the `--with-doc=<url>` flag **with an HTTPS URL** instead of built-in web search. For example: `vibe-tools plan "Implement login page according to specs" --with-doc=https://example.com/specs.pdf` or `vibe-tools repo "How should I implement this feature?" --with-doc=https://example.com/feature-spec.md`.
- If you need to refer to **local files**, include their paths directly in your main prompt, e.g., `vibe-tools plan "Implement the feature described in ./docs/my-feature-spec.md"`.

- When a user provides a specific **HTTPS URL** for documentation or reference material, always use the `--with-doc=<url>` flag with that URL rather than attempting to search for or summarize the content independently. This ensures the exact document is used as context. For local files, incorporate the path into the prompt.

**Running Commands:**
1. Use `vibe-tools <command>` to execute commands (make sure vibe-tools is installed globally using npm install -g vibe-tools so that it is in your PATH)

**General Command Options (Supported by all commands):**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, openrouter, modelbox, or xai). If provider is not specified, the default provider for that task will be used.
--model=<model name>: Specify an alternative AI model to use. If model is not specified, the provider's default model for that task will be used.
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--debug: Show detailed logs and error information

**Repository Command Options:**
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, modelbox, anthropic, or xai)
--model=<model>: Model to use for repository analysis
--max-tokens=<number>: Maximum tokens for response
--from-github=<GitHub username>/<repository name>[@<branch>]: Analyze a remote GitHub repository without cloning it locally
--subdir=<path>: Analyze a specific subdirectory instead of the entire repository
--with-doc=<doc_url>: Fetch content from one or more **HTTPS** document URLs and include it as context. Can be specified multiple times. **Note: Local file paths are not supported; for local files, include the path in your main query.**

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, modelbox, anthropic, or xai)
--model=<model>: Model to use for documentation generation
--max-tokens=<number>: Maximum tokens for response
--with-doc=<doc_url>: Fetch content from one or more **HTTPS** document URLs and include it as context. Can be specified multiple times. **Note: Local file paths are not supported; ensure local file content is referenced in the main prompt if needed.**

**YouTube Command Options:**
--type=<summary|transcript|plan|review|custom>: Type of analysis to perform (default: summary)

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content (disabled by default)
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 120000ms for Stagehand operations, 30000ms for navigation)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance. Special values: 'current' (use existing page), 'reload-current' (refresh existing page)
--wait=<time:duration or selector:css-selector>: Wait after page load (e.g., 'time:5s', 'selector:#element-id')
--video=<directory>: Save a video recording (1280x720 resolution, timestamped subdirectory). Not available when using --connect-to
--url=<url>: Required for `act`, `observe`, and `extract` commands. Url to navigate to before the main command or one of the special values 'current' (to stay on the current page without navigating or reloading) or 'reload-current' (to reload the current page)
--evaluate=<string>: JavaScript code to execute in the browser before the main command

**Nicknames**
Users can ask for these tools using nicknames
Gemini is a nickname for vibe-tools repo
Perplexity is a nickname for vibe-tools web
Stagehand is a nickname for vibe-tools browser
If people say "ask Gemini" or "ask Perplexity" or "ask Stagehand" they mean to use the `vibe-tools` command with the `repo`, `web`, or `browser` commands respectively.

**Xcode Commands:**
`vibe-tools xcode build [buildPath=<path>] [destination=<destination>]` - Build Xcode project and report errors.
**Build Command Options:**
--buildPath=<path>: (Optional) Specifies a custom directory for derived build data. Defaults to ./.build/DerivedData.
--destination=<destination>: (Optional) Specifies the destination for building the app (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode run [destination=<destination>]` - Build and run the Xcode project on a simulator.
**Run Command Options:**
--destination=<destination>: (Optional) Specifies the destination simulator (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode lint` - Run static analysis on the Xcode project to find and fix issues.

**Additional Notes:**
- For detailed information, see `node_modules/vibe-tools/README.md` (if installed locally).
- Configuration is in `vibe-tools.config.json` (or `~/.vibe-tools/config.json`).
- API keys are loaded from `.vibe-tools.env` (or `~/.vibe-tools/.env`).
- ClickUp commands require a `CLICKUP_API_TOKEN` to be set in your `.vibe-tools.env` file.
- Available models depend on your configured provider (OpenAI, Anthropic, xAI, etc.) in `vibe-tools.config.json`.
- repo has a limit of 2M tokens of context. The context can be reduced by filtering out files in a .repomixignore file.
- problems running browser commands may be because playwright is not installed. Recommend installing playwright globally.
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY`
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
- **Repomix Configuration:** You can customize which files are included/excluded during repository analysis by creating a `repomix.config.json` file in your project root. This file will be automatically detected by `repo`, `plan`, and `doc` commands.

**Handling Multi-line and Complex Prompts:**
When using `vibe-tools` with prompts that span multiple lines, contain special shell characters, or are generally complex, it's crucial to use methods that are safe and reliable, especially when these commands are intended to be executed programmatically (e.g., via `run_terminal_cmd`).

**Discouraging Heredocs (e.g., `<<EOF ... EOF`) for Programmatic Execution:**
While heredocs can be convenient for interactive shell use, they are **discouraged** for `vibe-tools` commands generated or executed by AI via `run_terminal_cmd`. This is due to complexities in reliably handling quoting, escaping, newline characters, and variable expansion within the heredoc block when passed as part of a command string to `run_terminal_cmd`.

Instead, use the following preferred approaches:

1.  **Escaped Strings (For Simple/Short Multi-line Prompts):**
    For prompts that are relatively short and simple, flatten the string using POSIX shell escape sequences (`\\n` for newline, `\\t` for tab, etc.) within a single quoted argument.

    ```bash
    vibe-tools plan "Create an implementation plan for a feature that:\\n1. Fetches data from an API\\n2. Processes the response with proper error handling\\n3. Updates multiple components\\n\\nInclude specific tasks for:\\n- Setting up API client\\n- Creating data models\\n- Implementing UI components\\n- Adding comprehensive tests"
    ```
    This is generally the simplest and most direct method for less complex prompts.

2.  **Temporary Files (For Complex/Long Prompts or Prompts with Special Characters):**
    For more complex prompts, especially those containing many lines, special characters (quotes, backticks, dollar signs), or intricate formatting, the most robust method is to write the prompt content to a temporary file and then use command substitution to pass its content to `vibe-tools`.

    ```bash
    # 1. Define your prompt content (escape for echo -e if needed)
    PROMPT_CONTENT="Create an implementation plan for a feature that:\\n1. Fetches data from an API (e.g., GET /users?id=\\$USER_ID)\\n2. Processes the response with proper error handling (check for status \'200 OK\')\\n3. Updates multiple components (e.g., <UserProfile /> and <ActivityFeed />)\\n\\nInclude specific tasks for:\\n- Setting up API client (use \`axios\` library)\\n- Creating data models (TypeScript interfaces)\\n- Implementing UI components (React functional components)\\n- Adding comprehensive tests (using Vitest and Testing Library)"

    # 2. Create a unique temporary file
    TMP_FILE=$(mktemp)

    # 3. Write the prompt content to the temporary file
    #    Using echo -e allows for interpretation of backslash escapes (like \\n, \\t)
    echo -e "$PROMPT_CONTENT" > "$TMP_FILE"

    # 4. Call vibe-tools, passing the content of the temporary file
    #    Using process substitution $(cat "$TMP_FILE")
    vibe-tools plan "$(cat "$TMP_FILE")"

    # 5. Clean up the temporary file
    rm "$TMP_FILE"
    ```
    This approach ensures the prompt is preserved exactly, avoids complex shell escaping within the command itself, and handles special characters reliably. Using `mktemp` is recommended for creating temporary files securely.

**Working with File Content (Important):**

When your prompt itself needs to include the content of *another* file (e.g., analyzing a source code file), combine the temporary file method for your main prompt instructions with a safe way to include the target file's content.

**WARNING: Do NOT use piping with nested heredocs or unsafe command substitutions** like this problematic approach:
```bash
# INCORRECT AND PROBLEMATIC - DON'T DO THIS:
# This nests a heredoc inside a command substitution, which is hard to get right
# and prone to errors when generated programmatically.
cat file.txt | vibe-tools ask "$(cat << 'EOF'
Format this data based on the input from the pipe...
EOF
)"
```

Instead, use these reliable approaches:

a.  **Store file content in a variable (for smaller files), then use in an escaped prompt:**
    ```bash
    # Store target file content in variable
    # Ensure file.txt content doesn't break the vibe-tools ask "..." string itself.
    # This is best for plain text files without too many special shell characters.
    FILE_CONTENT_TO_ANALYZE=$(<file.txt)
    vibe-tools ask "Format the following data which was read from a file:\\n\\n$FILE_CONTENT_TO_ANALYZE"
    ```

b.  **Use `--with-doc` option where supported by `vibe-tools` commands (HTTPS URLs ONLY):**
    This is often the best approach if the `vibe-tools` command supports it **and you are providing an HTTPS URL.**
    ```bash
    # Use built-in features when available with HTTPS URLs
    vibe-tools ask "Process the content from this online document" --with-doc=https://example.com/online-document.txt
    vibe-tools repo "Analyze our codebase in conjunction with the specifications at this URL" --with-doc=https://example.com/specs.html

    # For local files, include the path in the prompt:
    vibe-tools ask "Process the document located at ./docs/my_local_file.txt"
    vibe-tools repo "Analyze the code in path/to/local/code.py and explain its main functions"
    ```

c.  **Combine Temporary Files for Instructions and Reference Target File Paths (for local files):**
    If you need to provide complex instructions *about* how to process a **local file**, write your instructions to a temporary file, and in those instructions, refer to the target local file by its path. The `vibe-tools` command will then need to be prompted to consider the content of that local path.
    ```bash
    # Instructions for processing a local file file.txt
    INSTRUCTION_PROMPT="Format the data found in the local file 'file.txt' with these requirements:\\n1. Use markdown formatting.\\n2. Extract key points.\\n3. Summarize findings.\\nMake sure to process the content of 'file.txt'."

    TMP_INSTRUCTIONS_FILE=$(mktemp)
    echo -e "$INSTRUCTION_PROMPT" > "$TMP_INSTRUCTIONS_FILE"

    # vibe-tools is prompted to consider the local file path mentioned in the instructions
    vibe-tools ask "$(cat "$TMP_INSTRUCTIONS_FILE")" # The prompt itself now contains "file.txt"

    rm "$TMP_INSTRUCTIONS_FILE"
    ```
    Alternatively, if the local file content needs to be part of the prompt payload directly (e.g. for `vibe-tools ask` without relying on `repo`'s file system access):
    ```bash
    # Local file whose content will be embedded in the prompt
    LOCAL_FILE_TO_INCLUDE="docs/source.txt"
    # Create content for instructions.txt
    # Note: Ensure LOCAL_FILE_TO_INCLUDE content is properly escaped if directly embedded here.
    # It's often safer to have the AI model fetch it if it can, or read it into a variable first.
    echo -e "Format the data from '$LOCAL_FILE_TO_INCLUDE' with these requirements:\\n1. Markdown.\\nContent of $LOCAL_FILE_TO_INCLUDE is: $(cat "$LOCAL_FILE_TO_INCLUDE")" > instructions.txt

    # Use instructions.txt with vibe-tools
    vibe-tools ask "$(cat instructions.txt)"
    # rm instructions.txt # if it was temporary
    ```

d.  **Create a helper function (for frequent, complex operations by humans):**
    For complex, repetitive tasks performed manually in a shell, a helper function can encapsulate the logic.
    ```bash
    # Define helper function in your shell environment (e.g., .bashrc, .zshrc)
    # format_with_file() {
    #   local file_to_process=\"$1\"
    #   local instructions_text=\"$2\"
    #   local output_file=\"$3\"
    #
    #   local tmp_instructions_file=$(mktemp)
    #   echo -e \"$instructions_text\" > \"$tmp_instructions_file\"
    #
    #   # Assuming vibe-tools ask can take instructions and a document
    #   vibe-tools ask \"$(cat \"$tmp_instructions_file\")\" --with-doc=\"$file_to_process\" --save-to=\"$output_file\"
    #
    #   rm \"$tmp_instructions_file\"
    # }

    # Usage:
    # format_with_file path/to/data.txt "Format this as markdown" output.md
    ```

**Critical Guidelines for Programmatically Generated Prompts:**
- When AI generates commands for `run_terminal_cmd`:
    - **Prefer escaped strings** for simple multi-line prompts.
    - **Use the temporary file method** (with `mktemp`, `echo -e`, `cat`, and `rm`) for complex prompts or prompts containing user-supplied data or special characters. This is the safest way to avoid injection or misinterpretation issues.
- Avoid direct heredoc syntax in commands intended for `run_terminal_cmd`.
- Always ensure temporary files are cleaned up.
- Test complex prompt constructions thoroughly.

<!-- vibe-tools-version: 0.60.9 -->
</vibe-tools Integration>
