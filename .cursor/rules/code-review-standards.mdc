---
description: APPLY when REVIEWING code to MAINTAIN quality standards
globs: .github/PULL_REQUEST_TEMPLATE.md,.github/workflows/*.yaml,.github/workflows/*.yml
alwaysApply: false
---
# Code Review Standards

Guidelines for conducting effective code reviews, utilizing PR templates, and handling feedback.

<rule>
name: code_review_standards
description: Standards and best practices for the code review process
filters:
  - type: message
    pattern: "(?i)(code review|pull request|PR review|reviewer|review process|review feedback)"
  - type: file_path
    pattern: "(\\.github/PULL_REQUEST_TEMPLATE\\.md|\\.github/workflows/.*\\.yml)$"
  - type: content
    pattern: "(?i)(review|approved|request changes|feedback|suggestions)"

actions:
  - type: suggest
    message: |
      # Code Review Standards

      Effective code reviews improve code quality, ensure knowledge sharing, reduce bugs, and promote consistent practices across the codebase.

      ## Code Review Process

      ### 1. Pre-Review (Author Responsibilities)

      ```mermaid
      flowchart TD
          A[Write Code] --> B[Self Review]
          B --> C[Write Tests]
          C --> D[Update Documentation]
          D --> E[Complete PR Template]
          E --> F[Request Review]
      ```

      #### Self-Review Checklist

      Before requesting a review, ensure your code:

      - [ ] Follows project coding standards and conventions
      - [ ] Includes appropriate tests with meaningful coverage
      - [ ] Updates relevant documentation
      - [ ] Contains no debug code or commented-out sections
      - [ ] Has meaningful commit messages following [conventional commits](https://www.conventionalcommits.org/)
      - [ ] Includes necessary changesets (if applicable)
      - [ ] Properly handles error cases
      - [ ] Passes all CI checks
      - [ ] Is broken into logically reviewable chunks

      #### PR Template Usage

      Complete all sections in the PR template:

      ```markdown
      ## Description
      [Concise explanation of WHAT changed and WHY]

      ## Type of change
      - [ ] Bug fix
      - [ ] New feature
      - [ ] Breaking change
      - [ ] Documentation update
      - [ ] Refactoring

      ## How has this been tested?
      [Explain testing approach]

      ## Checklist
      - [ ] I have performed a self-review
      - [ ] My code passes all CI checks
      - [ ] I have added tests that prove my fix/feature works
      - [ ] I have updated relevant documentation
      - [ ] I have added necessary changesets
      ```

      ### 2. During Review (Reviewer Responsibilities)

      ```mermaid
      flowchart TD
          A[Read PR Description] --> B[Review Code Changes]
          B --> C[Run Code Locally if Needed]
          C --> D[Provide Feedback]
          D --> E[Approve or Request Changes]
      ```

      #### Required Review Criteria

      When reviewing code, evaluate these aspects:

      ##### Technical Aspects

      1. **Correctness**
         - Does the code behave as expected?
         - Are edge cases handled properly?
         - Does it fix the reported issue/implement the requested feature?

      2. **Architecture**
         - Is the solution well-structured?
         - Are components properly decoupled?
         - Do abstractions make sense?

      3. **Performance**
         - Are there potential bottlenecks?
         - Could any operations be optimized?
         - Are there unnecessary computations?

      4. **Security**
         - Are there potential security vulnerabilities?
         - Is sensitive data handled properly?
         - Are inputs validated?

      5. **Test Coverage**
         - Are tests comprehensive?
         - Do they cover edge cases?
         - Are they meaningful (not just for coverage)?

      ##### Non-Technical Aspects

      1. **Readability**
         - Is the code self-explanatory?
         - Are naming conventions followed?
         - Is complex logic adequately commented?

      2. **Documentation**
         - Are public APIs documented?
         - Are important decisions explained?
         - Is the PR description clear?

      3. **Consistency**
         - Does the code follow project conventions?
         - Is it consistent with surrounding code?
         - Does it align with the codebase style?

      #### Feedback Etiquette

      When providing feedback:

      1. **Be specific and actionable**
         - ❌ "This could be better"
         - ✅ "Consider using a map instead of a for loop here to improve readability"

      2. **Explain why, not just what**
         - ❌ "Use a different variable name"
         - ✅ "Consider renaming `data` to `userSettings` to clarify its purpose"

      3. **Use questions to suggest alternatives**
         - ❌ "This is wrong. Do it differently."
         - ✅ "Have you considered using X approach? It might help with Y challenge."

      4. **Differentiate between must-fix and nice-to-have**
         - ❌ "Change all of these things"
         - ✅ "These issues must be fixed before merging, while these would be nice to address if time permits"

      5. **Acknowledge good work**
         - ❌ Only pointing out problems
         - ✅ "I really like the solution for X" alongside constructive feedback

      #### Example Review Comments

      ```
      ## Must-Fix

      * The input validation could allow XSS attacks. Consider using the sanitizeHtml utility from core/security.

      * The performance will degrade on large datasets. Consider pagination or virtualization.

      ## Suggestions

      * The variable name `data` is ambiguous. Consider a more descriptive name.

      * This helper function might be useful in other places. Consider moving it to a shared utility.

      ## Positive

      * Great job with the error handling approach. I like the clear user feedback.

      * The test cases are comprehensive and well-structured.
      ```

      ### 3. Post-Review (Author Responses)

      ```mermaid
      flowchart TD
          A[Review Received] --> B[Acknowledge Feedback]
          B --> C[Address Each Comment]
          C --> D[Make Requested Changes]
          D --> E[Explain Complex Decisions]
          E --> F[Request Re-review]
      ```

      #### Handling Review Feedback

      When responding to feedback:

      1. **Address every comment**
         - Respond to each point, even if just acknowledging
         - Don't leave comments unaddressed

      2. **Explain your reasoning**
         - If you disagree, explain why clearly and respectfully
         - Provide context for your original approach if needed

      3. **Be concise but complete**
         - Keep responses focused and relevant
         - Provide enough detail to resolve the concern

      4. **Express gratitude**
         - Thank reviewers for their time and insights
         - Recognize good suggestions

      5. **Request clarification when needed**
         - If you don't understand feedback, ask for more details
         - Don't guess what the reviewer meant

      #### Handling Disagreements

      When you disagree with reviewer feedback:

      1. **Assume good intentions**
         - Start from the assumption that everyone wants the best outcome

      2. **Focus on technical merits**
         - Base arguments on technical considerations, not preferences

      3. **Provide evidence**
         - Share benchmarks, documentation, or examples supporting your approach

      4. **Consider a third opinion**
         - If consensus can't be reached, involve another reviewer

      5. **Document the decision**
         - Once resolved, document the rationale for future reference

      ### 4. Review Workflow

      ```mermaid
      flowchart TD
          A[PR Created] --> B[CI Checks Run]
          B --> C[Reviewers Assigned]
          C --> D[Reviews Conducted]
          D --> E{Approved?}
          E -->|Yes| F[PR Merged]
          E -->|No| G[Changes Requested]
          G --> H[Author Makes Changes]
          H --> B
      ```

      #### Requirements for Merging

      A PR can be merged when:

      1. All required CI checks have passed
      2. At least one reviewer has approved
      3. All requested changes have been addressed or discussed
      4. No unresolved blocking concerns remain

      ## Related Rules

      - [development-workflow](mdc:.cursor/rules/development-workflow.mdc): Outlines the overall process where code review fits.
      - [testing-practices](mdc:.cursor/rules/testing-practices.mdc): Test coverage is a key review criterion.
      - [changeset-workflow](mdc:.cursor/rules/changeset-workflow.mdc): Ensuring changesets are included is part of the author's pre-review.
      - [api-design-standards](mdc:.cursor/rules/api-design-standards.mdc): Reviewers should check adherence to API standards.
      - [eslint-config-usage](mdc:.cursor/rules/eslint-config-usage.mdc): Adherence to linting rules is checked.
      - [prettier-config-usage](mdc:.cursor/rules/prettier-config-usage.mdc): Adherence to formatting rules is checked.
      - [debugging-guide](mdc:.cursor/rules/debugging-guide.mdc): Provides techniques for resolving issues found in reviews.
      - [dependency-management](mdc:.cursor/rules/dependency-management.mdc): Dependencies should be reviewed for security and compatibility.
      - [ci-cd-workflow](mdc:.cursor/rules/ci-cd-workflow.mdc): PRs must pass CI checks before merging.
      - [typescript-patterns](mdc:.cursor/rules/typescript-patterns.mdc): Reviewers check for adherence to TS standards.

examples:
  - input: |
      I need to review a teammate's Pull Request. What are the main things I should focus on?
    output: |
      When reviewing a Pull Request, focus on these key areas:

      **Technical Aspects:**
      1.  **Correctness**: Does it work as intended? Does it handle edge cases?
      2.  **Architecture**: Is the structure sound? Are components well-designed?
      3.  **Performance**: Are there obvious bottlenecks or inefficiencies?
      4.  **Security**: Are there potential vulnerabilities? Is input validated?
      5.  **Test Coverage**: Are the tests sufficient and meaningful?

      **Non-Technical Aspects:**
      1.  **Readability**: Is the code clear and understandable?
      2.  **Documentation**: Are public APIs documented? Is the PR description clear?
      3.  **Consistency**: Does it follow project conventions and style?

      Remember to provide specific, actionable feedback, explain your reasoning, and acknowledge good work. Use the checklists and feedback etiquette guidelines in the main rule for more detail.

  - input: |
      How should I give feedback if I think the code could be improved but isn't necessarily wrong?
    output: |
      When providing feedback for improvements that aren't blocking issues (i.e., suggestions or non-critical points):

      1.  **Frame it as a Suggestion**: Use phrases like "Consider...", "What about...?", "Perhaps we could...", or prefix with `[Suggestion]` or `[Nitpick]`.
      2.  **Explain the Benefit**: Clearly state *why* you're suggesting the change (e.g., improves readability, better performance under certain conditions, aligns more closely with a different pattern used elsewhere).
      3.  **Make it Optional (If Appropriate)**: Indicate if the change is a "nice-to-have" rather than a requirement for merging.
      4.  **Be Specific**: Provide concrete examples of the suggested improvement if possible.
      5.  **Keep it Constructive**: Maintain a positive and collaborative tone.

      Example:
      ```
      [Suggestion] Consider renaming the `tempData` variable to something more descriptive like `processedItems`. It might make this section easier to follow later.
      ```
      This approach encourages improvement without demanding changes that aren't strictly necessary for the PR to be merged.

metadata:
  priority: high
  version: 1.0.2
  tags:
    - process
    - code-review
    - quality
</rule>
