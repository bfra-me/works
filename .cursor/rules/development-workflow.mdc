---
description: FOLLOW when DEVELOPING features to OPTIMIZE workflow efficiency
globs: *.ts,*.tsx,package.json,.changeset/*.md
alwaysApply: false
---
# Development Workflow Guidelines

Standards for development, testing, and publishing packages in the bfra.me/works monorepo.

<rule>
name: development_workflow
description: Standard development, testing, and publishing workflow for packages
filters:
  - type: message
    pattern: "(?i)(development workflow|development process|testing workflow|publishing packages|release process|changeset)"

actions:
  - type: suggest
    message: |
      # bfra.me/works Development Workflow

      This monorepo follows a structured development workflow for contributing, testing, and publishing packages.

      ## Local Development Setup

      ```bash
      # Clone the repository
      git clone https://github.com/bfra-me/works.git
      cd works

      # Install dependencies using pnpm
      pnpm bootstrap

      # Start development mode across all packages
      pnpm dev
      ```

      ## Common Development Scripts

      The root package provides these essential npm scripts:

      ```bash
      # Development mode
      pnpm dev            # Runs dev mode across all packages
      pnpm watch          # Builds and watches for changes

      # Quality Assurance
      pnpm lint           # Runs all linting checks
      pnpm fix            # Fixes linting issues automatically
      pnpm test           # Runs tests across all packages
      pnpm type-check     # Runs TypeScript type checking
      pnpm validate       # Runs lint, test, and build in sequence

      # Build and Publishing
      pnpm build                # Builds all packages
      pnpm version-changesets   # Creates versions based on changesets
      pnpm publish-changesets   # Publishes packages to npm
      ```

      ## Creating a New Feature

      1. **Create a branch**:
         ```bash
         git checkout -b feature/my-new-feature
         ```

      2. **Make your changes** and run tests locally:
         ```bash
         pnpm test
         pnpm lint
         ```

      3. **Create a changeset** to document your changes:
         ```bash
         pnpm changeset
         ```

         This will prompt you to:
         - Select the packages that were modified
         - Choose the version bump type (patch, minor, major)
         - Add a description of changes

      4. **Commit and push** your changes:
         ```bash
         git add .
         git commit -m "feat: add my new feature"
         git push -u origin feature/my-new-feature
         ```

      5. **Create a pull request** to the main branch

      ## Package Development Flow

      When developing a package in the monorepo:

      1. **Navigate to the package directory**:
         ```bash
         cd packages/my-package
         ```

      2. **Run package-specific scripts**:
         ```bash
         # From the package directory
         pnpm dev
         pnpm test
         pnpm build

         # Or from the root with filtering
         pnpm --filter @bfra.me/my-package dev
         ```

      3. **Link for local testing** (if needed):
         ```bash
         # From the package directory
         pnpm link --global

         # In another project
         pnpm link --global @bfra.me/my-package
         ```

      ## Testing

      This monorepo uses Vitest for testing. To write and run tests:

      1. **Write tests** using Vitest:
         ```typescript
         // sample.test.ts
         import {describe, it, expect} from 'vitest'

         describe('my feature', () => {
           it('should work correctly', () => {
             expect(true).toBe(true)
           })
         })
         ```

      2. **Run tests**:
         ```bash
         # All tests
         pnpm test

         # Specific package tests
         pnpm --filter @bfra.me/my-package test

         # Test with coverage
         pnpm test --coverage

         # Test in watch mode
         pnpm test --watch
         ```

      ## Release Process

      The release process is largely automated using Changesets:

      1. **Changesets Creation**:
         - Developers create changesets for their changes
         - Changesets are used to generate version bumps and changelogs

      2. **Release Automation**:
         - Weekly auto-release workflow checks for pending changesets
         - Creates or updates release PRs
         - Enables auto-merge for ready PRs

      3. **Version Bumping**:
         ```bash
         # Manual version bumping (usually done by CI)
         pnpm version-changesets
         ```

      4. **Publishing**:
         ```bash
         # Manual publishing (usually done by CI)
         pnpm publish-changesets
         ```

      5. **Release Process Flow**:
         - Push changes to main
         - CI builds and tests the changes
         - Changesets bot creates or updates release PR
         - When approved, release PR is merged
         - CI publishes packages to npm

      ## CI/CD Workflow

      The project uses GitHub Actions for CI/CD:

      1. **Main Workflow**:
         - Runs on pull requests and pushes to main
         - Performs linting and testing
         - Handles publishing via Changesets

      2. **Auto-Release Workflow**:
         - Runs weekly (Sundays at 6 PM UTC)
         - Checks for pending changesets
         - Creates or updates release PRs
         - Enables auto-merge for ready PRs

      3. **Renovate Workflow**:
         - Automates dependency updates
         - Integrates with the main CI workflow

examples:
  - input: |
      How do I contribute changes to this repository? What's the process for testing and publishing?
    output: |
      Here's how to contribute, test, and publish changes in this repository:

      1. First, set up your local development environment:
         ```bash
         git clone https://github.com/bfra-me/works.git
         cd works
         pnpm install
         ```

      2. Create a feature branch for your changes:
         ```bash
         git checkout -b feature/my-new-feature
         ```

      3. Make your changes and test them locally:
         ```bash
         pnpm test
         pnpm lint
         ```

      4. Create a changeset to document your changes:
         ```bash
         pnpm changeset
         ```
         This will prompt you to select packages, choose version bump types, and add descriptions.

      5. Commit and push your changes:
         ```bash
         git add .
         git commit -m "feat: add my new feature"
         git push -u origin feature/my-new-feature
         ```

      6. Create a pull request to the main branch.

      The repository uses GitHub Actions for CI/CD. When your PR is merged:
      - The main workflow will run tests
      - The auto-release workflow (weekly) will create/update release PRs based on changesets
      - When release PRs are approved and merged, packages are automatically published to npm

      For local package development, you can use filtered commands:
      ```bash
      pnpm --filter @bfra.me/my-package dev
      pnpm --filter @bfra.me/my-package test
      ```

  - input: |
      How do I run linting and automatically fix issues?
    output: |
      To run linting checks across the entire monorepo, use:
      ```bash
      pnpm lint
      ```
      To automatically fix fixable linting and formatting errors, use:
      ```bash
      pnpm fix
      ```
      This command combines ESLint and Prettier fixes.

  - input: |
      How do I run tests specifically for the `prettier-config` package?
    output: |
      To run tests only for the `@bfra.me/prettier-config` package, use the `--filter` flag with the test script from the monorepo root:
      ```bash
      pnpm --filter @bfra.me/prettier-config test
      ```
      You can also run tests in watch mode for that specific package:
      ```bash
      pnpm --filter @bfra.me/prettier-config test --watch
      ```

  - input: |
      What triggers a new release automatically?
    output: |
      New releases are triggered automatically based on changesets merged into the `main` branch.

      1.  When Pull Requests containing `.changeset/*.md` files are merged into `main`, these changesets accumulate.
      2.  A weekly GitHub Actions workflow (`.github/workflows/release.yml`) runs automatically (typically Sunday evening UTC).
      3.  This workflow checks for pending changesets.
      4.  If changesets exist, it creates (or updates) a "Version Packages" Pull Request.
      5.  This PR bumps package versions according to the changesets and updates changelogs.
      6.  Once this "Version Packages" PR is reviewed, approved, and merged, the workflow proceeds to publish the updated packages to npm and create a GitHub release.

      So, the main trigger is merging PRs with changesets into `main`, followed by the automated weekly workflow processing those changesets.

metadata:
  priority: high
  version: 1.0.2
  tags:
    - workflow
    - development
    - testing
    - publishing
</rule>
