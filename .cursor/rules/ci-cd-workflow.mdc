---
description: USE when TROUBLESHOOTING CI/CD issues to RESOLVE build failures
globs: .github/**/*.yaml,.github/**/*.yml,**/release.config.js,.changeset/*.md
alwaysApply: false
---
# CI/CD Workflow Guide

This rule provides comprehensive guidance for interacting with the CI/CD pipeline, troubleshooting build failures, and managing the release process in the bfra.me/works monorepo.

<rule>
name: ci_cd_workflow
description: Guide for understanding CI/CD processes, troubleshooting build failures, and managing release automation

filters:
  - type: file_path
    pattern: "\\.github/workflows/.*\\.ya?ml$"
  - type: file_path
    pattern: "\\.changeset/.*\\.md$"
  - type: file_path
    pattern: ".*release\\.config\\.js$"
  - type: message
    pattern: "(?i)(ci|cd|continuous integration|continuous delivery|github actions|workflow|build failure|release|changeset|semantic release)"

actions:
  - type: suggest
    message: |
      # CI/CD Workflow Guide

      This guide explains how to effectively work with the CI/CD pipeline, troubleshoot build failures, and manage the release process in the bfra.me/works monorepo.

      ## CI/CD Pipeline Overview

      Our CI/CD pipeline consists of:

      ```mermaid
      flowchart TD
          A[Push to Branch] --> B[CI Checks]
          B --> C{All Checks Pass?}
          C -->|No| D[Fix Issues]
          D --> A
          C -->|Yes| E[PR Review]
          E --> F[Merge to Main]
          F --> G[Release Workflow]
          G --> H[Version Bump via Changesets]
          H --> I[Publish to npm]
      ```

      ### GitHub Actions Workflows

      | Workflow | Purpose | Trigger | File Location |
      |----------|---------|---------|--------------|
      | CI | Linting, type checking, testing | Push, PR | `.github/workflows/ci.yml` |
      | Release | Versioning, changelog, npm publish | Merge to main | `.github/workflows/release.yml` |
      | PR Checks | PR validation, size checks | PR creation/update | `.github/workflows/pr-checks.yml` |

      ## Local Development and CI Connection

      ### Pre-Commit Validation

      Before pushing changes, run these commands locally to simulate CI checks:

      ```bash
      # Lint code
      pnpm lint

      # Type check
      pnpm type-check

      # Run tests
      pnpm test
      ```

      ### Branch Protection Rules

      Main branch is protected with these requirements:

      - All CI checks must pass
      - Required number of reviewers: 1
      - No direct pushes (PR required)
      - Status checks required:
        - lint
        - build
        - test

      ## CI Failure Troubleshooting

      ### Common CI Failures and Solutions

      #### 1. Lint Failures

      **Symptoms:** ESLint/Prettier errors in CI logs

      **Solutions:**
      - Run `pnpm lint` locally to replicate
      - Use `pnpm lint:fix` to automatically fix issues
      - For advanced cases, check `.eslintrc.js` configuration

      **Example Error:**
      ```
      error  Missing semicolon  semi
      ```

      **Fix:**
      ```bash
      # Fix all lint errors automatically
      pnpm lint:fix

      # Fix specific files
      pnpm lint:fix packages/eslint-config/src/index.ts
      ```

      #### 2. Type Check Failures

      **Symptoms:** TypeScript errors in CI logs

      **Solutions:**
      - Run `pnpm type-check` locally
      - Check for missing type definitions
      - Verify imports and exports
      - Consider updating `tsconfig.json` if needed

      **Example Error:**
      ```
      TS2322: Type 'string' is not assignable to type 'number'
      ```

      **Fix:**
      ```typescript
      // Before
      const count: number = "5";

      // After
      const count: number = 5;
      ```

      #### 3. Test Failures

      **Symptoms:** Failed tests in CI logs

      **Solutions:**
      - Run `pnpm test` locally to replicate
      - Check for flaky tests (inconsistent results)
      - Verify test environment differences

      **Example Error:**
      ```
      Expected: 42
      Received: undefined
      ```

      **Fix:**
      - Update test to match implementation changes
      - Fix implementation to satisfy test requirements
      - If test is flaky, consider adding retry logic

      #### 4. Build Failures

      **Symptoms:** Package build errors in CI logs

      **Solutions:**
      - Run `pnpm build` locally to replicate
      - Check for breaking changes in dependencies
      - Verify build configuration settings

      **Fix:**
      ```bash
      # Clean node_modules and rebuild
      pnpm clean
      pnpm install
      pnpm build
      ```

      ### Reading CI Logs

      1. **Go to the failed workflow run** in GitHub Actions
      2. **Expand the failed step** to see detailed logs
      3. **Look for error markers**: "Error", "Failed", "Exception"
      4. **Check the context**: Look at steps before the failure
      5. **Review artifacts**: Download and examine any build artifacts

      ## Release Automation

      ### Changeset-Based Releases

      We use [Changesets](https://github.com/changesets/changesets) for versioning and changelog management:

      #### Adding a Changeset

      ```bash
      # Create a new changeset
      pnpm changeset

      # Answer the prompts:
      # 1. Select packages that changed
      # 2. Select version bump type (patch/minor/major)
      # 3. Write a description of changes
      ```

      #### Changeset Format

      ```markdown
      ---
      "@bfra.me/package-name": patch
      "@bfra.me/other-package": minor
      ---

      Description of the changes in this release
      ```

      #### Release Process

      1. Changesets are collected when PRs are merged to main
      2. The release workflow runs automatically
      3. Version numbers are bumped according to changesets
      4. Changelogs are generated
      5. New versions are published to npm
      6. A GitHub release is created

      ### Manual Release Trigger

      In exceptional cases, you can manually trigger the release workflow:

      1. Go to "Actions" tab in GitHub
      2. Select the "Release" workflow
      3. Click "Run workflow"
      4. Select the branch (usually main)
      5. Trigger the workflow

      ## Debugging CI Issues

      ### Reproducing Locally

      Create a local environment that mirrors CI:

      ```bash
      # Start with a clean state
      pnpm clean

      # Fresh install with frozen lockfile
      pnpm install --frozen-lockfile

      # Run the specific failing command
      pnpm test
      ```

      ### Workflow Debugging

      Add temporary debugging steps to workflows:

      ```yaml
      - name: Debug environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Current directory: $(pwd)"
          echo "Directory listing: $(ls -la)"
          echo "Environment variables: $(env | grep -v SECRET)"
      ```

      ### CI Cache Issues

      If you suspect cache problems:

      ```bash
      # Locally
      pnpm clean
      pnpm install --frozen-lockfile

      # In workflow
      - name: Clear caches
        run: |
          rm -rf ./node_modules/.cache
          pnpm store prune
      ```

      ### SSH Debugging (Advanced)

      If necessary, use [tmate](https://github.com/tmate-io/tmate) to SSH into the runner for interactive debugging:

      ```yaml
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      ```

      ## Advanced Topics

      ### Customizing Workflows

      To modify workflow behavior:

      1. Edit workflow files in `.github/workflows/`
      2. Test changes on a feature branch
      3. Consider workflow impact on other developers

      ### Branch-Specific CI Behavior

      Configure different CI behavior for specific branches:

      ```yaml
      jobs:
        test:
          if: github.ref != 'refs/heads/main'
          # Regular testing job

        full-test:
          if: github.ref == 'refs/heads/main'
          # More comprehensive testing
      ```

      ### Scheduled Workflows

      Set up maintenance workflows on a schedule:

      ```yaml
      on:
        schedule:
          # Run at 2am UTC every Monday
          - cron: '0 2 * * 1'
      ```

      ## Integration with Other Workflows

      ### Testing Practices

      The CI/CD workflow integrates with [testing-practices](mdc:.cursor/rules/testing-practices.mdc) to ensure all tests pass before merging. Key integration points:

      - Test runners are configured consistently across local and CI environments
      - Test coverage requirements are enforced in CI
      - Test reports are generated as artifacts

      ### Dependency Management

      The CI/CD workflow works with dependency management (see upcoming rule) to ensure:

      - Dependency integrity is verified in CI
      - Renovate bot PRs pass all checks
      - Package versions are managed through changesets

      ### Development Workflow

      This rule complements the [development-workflow](mdc:.cursor/rules/development-workflow.mdc) rule by focusing on:

      - CI/CD specific processes
      - Build failure troubleshooting
      - Release automation details

      ## Related Documentation

      - [GitHub Actions Documentation](https://docs.github.com/en/actions)
      - [Changesets Documentation](https://github.com/changesets/changesets)
      - [Semantic Release Documentation](https://github.com/semantic-release/semantic-release)

      ## Related Rules

      - [changeset-workflow](mdc:.cursor/rules/changeset-workflow.mdc): Detailed guide on using Changesets.
      - [development-workflow](mdc:.cursor/rules/development-workflow.mdc): Overall development process that integrates with CI/CD.
      - [eslint-config-usage](mdc:.cursor/rules/eslint-config-usage.mdc): For resolving linting configuration issues.
      - [prettier-config-usage](mdc:.cursor/rules/prettier-config-usage.mdc): For resolving formatting issues in CI.
      - [testing-practices](mdc:.cursor/rules/testing-practices.mdc): For understanding test setup and failures.
      - [debugging-guide](mdc:.cursor/rules/debugging-guide.mdc): General debugging techniques applicable to CI failures.
      - [dependency-management](mdc:.cursor/rules/dependency-management.mdc): For resolving dependency issues that might cause build failures.
      - [semantic-release](mdc:packages/semantic-release/README.md): For configuration of the release process.
      - [tsconfig](mdc:packages/tsconfig/README.md): Base TypeScript configuration used in `pnpm type-check`.

examples:
  - input: |
      My CI build failed on the lint step. How do I fix it?
    output: |
      A failure on the lint step usually means your code doesn't conform to the project's ESLint or Prettier rules.

      Here's how to troubleshoot and fix it:

      1.  **Check CI Logs**: Go to the failed GitHub Actions run, expand the "Lint" step, and identify the specific errors reported (e.g., `Missing semicolon`, `Line exceeds maximum length`).
      2.  **Run Lint Locally**: Replicate the CI check locally:
          ```bash
          pnpm lint
          ```
      3.  **Auto-Fix Issues**: Many linting and formatting errors can be fixed automatically:
          ```bash
          pnpm lint:fix
          ```
      4.  **Manual Fixes**: If `lint:fix` doesn't solve everything, manually edit the files indicated in the logs to resolve the remaining errors.
      5.  **Verify**: Run `pnpm lint` again locally to ensure all issues are resolved before pushing.

      Consult the [eslint-config-usage](mdc:.cursor/rules/eslint-config-usage.mdc) and [prettier-config-usage](mdc:.cursor/rules/prettier-config-usage.mdc) rules if you suspect a configuration issue.

  - input: |
      I need to release a patch for the `eslint-config` package. How do I do that?
    output: |
      To release a patch update for `@bfra.me/eslint-config`, you need to add a changeset:

      1.  **Create a Changeset**: Run the changeset command:
          ```bash
          pnpm changeset
          ```
      2.  **Select Package**: Use the arrow keys and spacebar to select `@bfra.me/eslint-config`.
      3.  **Select Bump Type**: Choose `patch` for this fix.
      4.  **Write Description**: Enter a clear summary of the patch fix (this will go into the changelog).
      5.  **Confirm**: Review and confirm the changeset details.

      This will create a new markdown file in the `.changeset/` directory (e.g., `.changeset/nice-llamas-repeat.md`). Commit this file along with your code changes in your Pull Request.

      Once your PR is merged into the main branch, the release workflow will automatically:
      - Include your patch bump when determining the next version for `@bfra.me/eslint-config`.
      - Add your description to the package's `CHANGELOG.md`.
      - Publish the new version to npm.

      For more details, see the [changeset-workflow](mdc:.cursor/rules/changeset-workflow.mdc) rule.

  - input: |
      The test step is failing in CI but passes locally. What should I check?
    output: |
      Tests failing in CI but passing locally often point to environment differences or non-deterministic tests.

      Here's a checklist:

      1.  **Environment Variables**: Does the test rely on environment variables that are set locally but not in CI? Check the workflow file (`.github/workflows/ci.yml`) for how environment variables are set up.
      2.  **Dependency Versions**: CI uses `pnpm install --frozen-lockfile`, ensuring exact versions from `pnpm-lock.yaml`. Does your local environment match? Try running `pnpm install --frozen-lockfile` locally.
      3.  **Node.js/Tool Versions**: Check if the Node.js version or other tool versions used in CI (specified in the workflow file) match your local setup.
      4.  **Operating System Differences**: Are there subtle differences due to OS (e.g., file path separators, case sensitivity)? CI typically runs on Linux.
      5.  **Flaky Tests**: Is the test non-deterministic? Does it rely on timing, external services (that might be unstable), or random data? Refactor the test to be deterministic or add retry logic carefully.
      6.  **State Pollution**: Does a previous test in the CI run affect the failing test? Ensure tests are properly isolated (e.g., resetting mocks/stubs in `afterEach`).
      7.  **Resource Constraints**: CI runners might have different resource limits (CPU, memory) than your local machine. Could this be affecting the test?
      8.  **Verbose Logs**: Rerun the CI job with verbose logging if possible, or add more detailed logging within the failing test itself and commit it to see the output in CI.
      9.  **Local CI Simulation**: Try running the tests locally using the exact same commands as CI (often `pnpm test --run`).

      Start by comparing the CI environment setup in the workflow file to your local setup and checking for non-deterministic test behavior.

metadata:
  priority: high
  version: 1.0.2
  tags:
    - ci-cd
    - workflow
    - troubleshooting
    - release
    - github-actions
</rule>

## CI vs CD: Key Differences

- **Continuous Integration (CI)**: Automatically builds and tests code changes
- **Continuous Delivery (CD)**: Automates the delivery of applications to selected environments
- **Continuous Deployment**: Automatically deploys all changes that pass tests to production

## GitHub Actions Configuration

### Key Components

GitHub Actions workflows are defined in YAML files located in `.github/workflows/`. Each workflow consists of:

- **Triggers**: Events that start the workflow (push, PR, schedule)
- **Jobs**: Groups of steps that execute on the same runner
- **Steps**: Individual tasks that run commands or actions
- **Actions**: Reusable units of code that can be shared

### Example Workflow Structure

```yaml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.x'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run tests
      run: pnpm test
```

## Secrets and Environment Variables

### Storing Secrets

Store sensitive information in GitHub repository secrets:

1. Go to repository Settings
2. Select Secrets and variables > Actions
3. Click "New repository secret"
4. Add name (e.g., `NPM_TOKEN`) and value

### Using Secrets in Workflows

```yaml
steps:
  - name: Publish to npm
    run: npm publish
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
```

## Best Practices

1. **Keep workflows focused**: Create separate workflows for different purposes
2. **Cache dependencies**: Speed up builds by caching node_modules
3. **Use matrix builds**: Test across multiple Node versions or OS environments
4. **Set timeouts**: Prevent workflows from running indefinitely
5. **Add workflow status badges**: Show build status in README
6. **Test workflows locally**: Use [act](https://github.com/nektos/act) to test workflows before pushing

## Versioning and Release Strategy

### Semantic Versioning

- **Patch (0.0.x)**: Bug fixes and minor changes
- **Minor (0.x.0)**: New features, backward compatible
- **Major (x.0.0)**: Breaking changes

### When to Create Changesets

Create a changeset when:
- Fixing a bug that affects users
- Adding new features or APIs
- Changing or removing existing functionality
- Updating dependencies that affect public APIs

Skip changesets for:
- Documentation-only changes
- Internal refactoring that doesn't affect behavior
- Changes to tests that don't affect public APIs
- Development tooling changes
