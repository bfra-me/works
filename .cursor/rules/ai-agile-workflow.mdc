---
description: FOLLOW when MANAGING tasks to STREAMLINE progress tracking and ENSURE proper memory file management with vibe-tools integration
globs: docs/plans/*.md,docs/tasks/**/*.md,docs/features.md,docs/plan.md,docs/memory/**/*.md
alwaysApply: false
---
# AI-Assisted Agile Workflow

Guidelines for using Cursor rules to generate and track task documents from plan documents.

<rule>
name: ai_agile_workflow
description: Process for generating well-defined task documents from plans and tracking progress using AI assistance
filters:
  - type: file_path
    pattern: "docs/(plans|tasks)/.*\\.md$"
  - type: file_path
    pattern: "docs/features\\.md$"
  - type: file_path
    pattern: "docs/plan\\.md$"
  - type: file_path
    pattern: "docs/memory/.*\\.md$"
  - type: message
    pattern: "(?i)(task generation|plan breakdown|agile workflow|track feature|create task)"
  - type: content
    pattern: "\\[Plan\\]|\\[Task\\]|\\[Status: (Not Started|In Progress|Completed)\\]"

actions:
  - type: suggest
    message: |
      # AI-Assisted Agile Workflow

      This workflow orchestrates AI-assisted agile development through a systematic process flow, delegating implementation details to specialized rules.

      ## Core Principles

      1. **Context Retention** - Maintain persistent context across AI conversations using memory files
      2. **Progressive Refinement** - Move systematically from features to plans to specific tasks
      3. **AI Augmentation** - Leverage specialized AI tools for research, planning, and implementation
      4. **Cross-Reference Integration** - Utilize the `mdc:` syntax to connect related documentation
      5. **Sequential Thinking** - Apply structured reasoning to break down complex problems into manageable steps
      6. **Memory First** - Always load essential memory files before beginning any workflow step

      ## Workflow Stages

      ### 1. Feature Capture & Refinement

      Begin by researching and capturing feature requirements in the central reference document. Use `vibe-tools web` for research and `vibe-tools repo` for codebase context before adding features to [features.md](mdc:docs/features.md).

      **Key Tools:** `vibe-tools web`, `vibe-tools repo`
      **Template:** [Feature Template](mdc:docs/templates/feature-template.md)
      **Detailed Guide:** [Vibe-Tools Playbook](mdc:docs/memory/vibe-tools-playbook.md#web-research-with-web)

      ### 2. Plan Creation

      For high-priority features, create comprehensive implementation plans that break down the feature into phases and tasks. **Always use `vibe-tools plan`** to generate context-aware plans when available.

      **Key Tools:** `vibe-tools plan`, `vibe-tools repo` (for review)
      **Template:** [Plan Template](mdc:docs/templates/plan-template.md)
      **Detailed Guide:** [Vibe-Tools Playbook](mdc:docs/memory/vibe-tools-playbook.md#implementation-planning-with-plan)

      ### 3. Task Generation

      From each plan, generate specific task documents with clear acceptance criteria and dependencies. Check existing task IDs to determine the next available sequence number.

      **Key Tools:** `vibe-tools plan` (for breakdown), `vibe-tools repo` (for code-aware tasks)
      **Template:** [Task Template](mdc:docs/templates/task-template.md)
      **Note:** Before creating a new task document, always check for existing task files to determine the next available sequence number.

      ### 4. Task Execution

      Execute tasks according to their defined acceptance criteria, consulting memory files for context and using appropriate AI tools for assistance.

      **Essential Context Loading:** Before beginning any task, load the following memory files:
      1. [workflow-status.md](mdc:docs/memory/workflow-status.md)
      2. [architecture.md](mdc:docs/memory/architecture.md)
      3. [user-preferences.md](mdc:docs/memory/user-preferences.md)
      4. [domain-knowledge.md](mdc:docs/memory/domain-knowledge.md)

      **Knowledge Graph Integration:** Always query the Knowledge Graph (using `mcp_memory_search_nodes` or `mcp_memory_open_nodes`) to load relevant entities for task context and personalization.

      **See:** [Memory Management](mdc:.cursor/rules/memory-management.mdc) for detailed guidance on context loading.

      ### 5. Task Completion & Memory Update

      When a task is completed, update its status in both the task document and relevant memory files. The update process is activated when messages indicate task completion.

      **Trigger Conditions:** Messages containing phrases like "task completed", "finished implementing", "done with", etc.

      **Required Updates:**
      - Mark the task as "Completed" in the task document
      - Update [workflow-status.md](mdc:docs/memory/workflow-status.md) task history
      - Update Knowledge Graph entities as needed

      **See:** [Memory Management](mdc:.cursor/rules/memory-management.mdc#memory-file-updates-on-task-completion) for detailed memory update procedures.

      ### 6. Progress Tracking

      Maintain an overview of project progress by regularly updating the workflow status memory file and feature document with current states and completion information.

      ## Sequential Thinking Requirement

      Throughout this workflow, when 'Sequential Thinking', 'step-by-step approach', or 'structured reasoning' is mentioned, it refers to the use of the **`mcp_sequential-thinking_sequentialthinking`** tool.

      **For detailed guidance on Sequential Thinking:**
      - [Anthropic Chain of Thought](mdc:.cursor/rules/anthropic-chain-of-thought.mdc) for structured reasoning methodology
      - [MCP Tools Usage](mdc:.cursor/rules/mcp-tools-usage.mdc) for tool integration

      ## AI Command Quick Reference

      | Stage | Primary Command | Secondary Command | See Details |
      |-------|----------------|-------------------|------------|
      | Research | `vibe-tools web` | `vibe-tools repo` | [Vibe-Tools Web](mdc:docs/memory/vibe-tools-playbook.md#web-research-with-web) |
      | Planning | `vibe-tools plan` | `vibe-tools repo` | [Vibe-Tools Plan](mdc:docs/memory/vibe-tools-playbook.md#implementation-planning-with-plan) |
      | Task Generation | `vibe-tools plan` | `vibe-tools repo` | [Vibe-Tools Plan](mdc:docs/memory/vibe-tools-playbook.md#implementation-planning-with-plan) |
      | Codebase Analysis | `vibe-tools repo` | - | [Vibe-Tools Repo](mdc:docs/memory/vibe-tools-playbook.md#repository-analysis-with-repo) |

      ## Related Rules

      - [memory-management](mdc:.cursor/rules/memory-management.mdc): Provides guidelines for maintaining memory files and knowledge graph integration
      - [vibe-tools](mdc:.cursor/rules/vibe-tools.mdc): Comprehensive guide to using the vibe-tools CLI commands
      - [date-consistency-enforcer](mdc:.cursor/rules/date-consistency-enforcer.mdc): Ensures consistent date formatting in all documents
      - [anthropic-chain-of-thought](mdc:.cursor/rules/anthropic-chain-of-thought.mdc): Structures the sequential thinking approach
      - [mcp-tools-usage](mdc:.cursor/rules/mcp-tools-usage.mdc): Guidelines for using MCP tools like `sequential-thinking` and knowledge graph
      - [user-preferences-awareness](mdc:.cursor/rules/user-preferences-awareness.mdc): Aligns workflow steps with user preferences
      - [typescript-patterns](mdc:.cursor/rules/typescript-patterns.mdc): Ensures code generated during tasks follows code style preferences
      - [testing-practices](mdc:.cursor/rules/testing-practices.mdc): Guides the creation of tests for implemented features
      - [debugging-guide](mdc:.cursor/rules/debugging-guide.mdc): Provides troubleshooting methods for task implementation
      - [rule-acknowledgement](mdc:.cursor/rules/rule-acknowledgement.mdc): Ensures proper tracking of rules used during task execution
      - [self-improvement](mdc:.cursor/rules/self-improvement.mdc): Mandates continuous improvement in the application of the workflow

examples:
  - input: |
      I need to create a plan for implementing cross-references in our documentation system.
    output: |
      I'll help you create a plan for implementing cross-references in your documentation system. Let me use the AI-Assisted Agile Workflow to guide this process:

      First, I'll check if this feature is already captured in your features document. If not, we should add it there before creating a detailed plan.

      To research and create an effective plan, I'll use `vibe-tools`:

      ```bash
      vibe-tools plan "Create a detailed implementation plan for adding cross-references between markdown documents in our documentation system. The cross-references should work in both the web interface and IDEs like VS Code and Cursor."
      ```

      This will generate a comprehensive plan following the structure in the [Plan Template](mdc:docs/templates/plan-template.md), including:
      - Clearly defined phases
      - Specific tasks with complexity ratings
      - Dependencies between tasks
      - Acceptance criteria for each task

      Once generated, I'll review the plan and save it to `docs/plans/cross-references-implementation.md`. Then we can generate specific task documents from this plan.

      Would you like me to proceed with this approach?

  - input: |
      Generate task documents from the implementation plan in docs/plans/memory-file-automation.md
    output: |
      I'll generate task documents from the memory-file-automation plan. First, I need to check current task IDs to ensure I use the next available sequence numbers.

      After reviewing the plan and existing tasks, I'll generate properly structured task documents for each task identified in the plan.

      For each task, I'll:
      1. Create a new file using the task ID format `YYYY-MM-DD-XX.md` in the `docs/tasks/` directory
      2. Follow the [Task Template](mdc:docs/templates/task-template.md) format
      3. Include clear acceptance criteria derived from the plan
      4. Establish proper dependencies between tasks
      5. Set appropriate complexity ratings

      Each task document will include:
      - A clear description
      - Specific acceptance criteria
      - Dependencies on other tasks
      - Estimated effort
      - Initial "Not Started" status

      I'll also update the workflow status memory file to include these new tasks in the tracking system.

      Would you like me to generate these task documents now?

  - input: |
      I've completed the task for implementing the cross-reference syntax parser (Task ID: 2025-05-03-02)
    output: |
      Great! I'll update the necessary documents to reflect this completed task.

      First, I'll update the task document to mark it as completed:
      - Set status to "Completed" in `docs/tasks/2025-05-03-02.md`

      Then, I'll update the workflow status memory file with this completion:
      - Update the Task History table in `docs/memory/workflow-status.md`
      - Move this task from "Active Tasks" to completed tasks
      - Add an entry to "Recent Updates" with today's date

      Finally, I'll update the knowledge graph to capture this implementation milestone:
      - Add observations to relevant entities about the cross-reference syntax parser
      - Update the status of related components
      - Create relationships between the implemented parser and other system components

      The memory files and knowledge graph have been updated to reflect the completion of the cross-reference syntax parser task. Would you like me to summarize the next task in the implementation plan?

metadata:
  priority: high
  version: 3.0.0
  tags:
    - workflow
    - task-management
    - memory
    - agile
    - vibe-tools
</rule>
