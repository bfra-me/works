---
description: IMPLEMENT when MANAGING tasks to STREAMLINE progress tracking
globs: docs/plans/*.md,docs/tasks/**/*.md,docs/features.md,docs/plan.md,docs/memory/**/*.md
alwaysApply: false
---
# AI-Assisted Agile Workflow

Guidelines for using Cursor rules to generate and track task documents from plan documents.

<rule>
name: ai_agile_workflow
description: Process for generating well-defined task documents from plans and tracking progress using AI assistance
filters:
  - type: file_path
    pattern: "docs/(plans|tasks)/.*\\.md$"
  - type: file_path
    pattern: "docs/features\\.md$"
  - type: file_path
    pattern: "docs/plan\\.md$"
  - type: file_path
    pattern: "docs/memory/.*\\.md$"
  - type: message
    pattern: "(?i)(task generation|plan breakdown|agile workflow|track feature|create task)"
  - type: content
    pattern: "\\[Plan\\]|\\[Task\\]|\\[Status: (Not Started|In Progress|Completed)\\]"

actions:
  - type: suggest
    message: |
      # AI-Assisted Agile Workflow

      This workflow uses Cursor rules and AI assistance to generate well-defined task documents from comprehensive plans and track progress on features.

      ## Overview of the Workflow

      Our AI-assisted agile workflow combines traditional agile methodologies with AI automation to streamline development processes. The workflow consists of:

      1. **Capturing Features** in a central reference document
      2. **Creating Plan Documents** that outline comprehensive implementation approaches
      3. **Generating Task Documents** from plans with AI assistance
      4. **Tracking Progress** with AI-generated reports
      5. **Updating Status** automatically as tasks are completed

      ## Document Types

      ### 1. Central Reference Document (`docs/features.md`)

      This document tracks all features for improving the project, including:

      ```markdown
      # Project Features

      ## Current Features

      ### Feature 1: [Title]

      - **Description**: Brief description of the feature
      - **Status**: [Not Started | In Progress | Completed]
      - **Plan Document**: [Link to plan document]
      - **Priority**: [High | Medium | Low]
      - **Created**: YYYY-MM-DD
      - **Updated**: YYYY-MM-DD

      ### Feature 2: [Title]

      ...

      ## Completed Features

      ### Feature X: [Title]

      - **Description**: Brief description of the feature
      - **Status**: Completed
      - **Plan Document**: [Link to plan document]
      - **Completion Date**: YYYY-MM-DD
      - **Outcome**: Brief description of the outcome
      ```

      ### 2. Plan Documents (`docs/plans/[plan-name].md`)

      Each plan document outlines a comprehensive approach to implementing a feature:

      ```markdown
      # Plan: [Plan Title]

      ## Overview

      Brief description of the plan and its goals.

      ## Related Feature

      [Link to the feature in the features document]

      ## Success Criteria

      - Criterion 1
      - Criterion 2
      - ...

      ## Implementation Phases

      ### Phase 1: [Phase Title]

      **Objective**: Clear statement of the phase objective

      **Tasks**:

      1. [Task 1 description]
         - **Complexity**: [Low | Medium | High]
         - **Dependencies**: None
         - **Acceptance Criteria**: Clear criteria for completion

      2. [Task 2 description]
         - **Complexity**: [Low | Medium | High]
         - **Dependencies**: Task 1
         - **Acceptance Criteria**: Clear criteria for completion

      ### Phase 2: [Phase Title]

      ...

      ## Timeline

      - Phase 1: X weeks
      - Phase 2: Y weeks
      - ...

      ## Resources Required

      - Resource 1
      - Resource 2
      - ...
      ```

      ### 3. Task Documents (`docs/tasks/[task-id].md`)

      Individual task documents derived from plan documents:

      ```markdown
      # Task: [Task Title]

      ## Task ID: YYYY-MM-DD-XX

      ## Related Plan

      [Link to the plan document]

      ## Description

      Detailed description of the task.

      ## Acceptance Criteria

      - Criterion 1
      - Criterion 2
      - ...

      ## Dependencies

      - [List of dependencies, if any]

      ## Complexity

      [Low | Medium | High]

      ## Estimated Effort

      [X hours | X days]

      ## Status

      [Not Started | In Progress | Completed]

      ## Assignee

      [Name or "Unassigned"]

      ## Notes

      Any additional notes or context.
      ```

      ### 4. Memory File (`docs/memory/workflow-status.md`)

      A memory file that tracks the current state of the workflow and provides context for AI assistants:

      ```markdown
      # Workflow Status Memory

      ## Current State

      - **Current Date**: YYYY-MM-DD
      - **Active Projects**:
        1. [Project 1 name]
        2. [Project 2 name]
      - **Current Plans**:
        1. [Plan 1 name]
        2. [Plan 2 name]
      - **Current Phase**:
        1. [Phase 1 name] ([Project 1 name])
        2. [Phase 2 name] ([Project 2 name])
      - **Active Tasks**:
        - [Task 1 name] (Task ID: YYYY-MM-DD-XX)
        - [Task 2 name] (Task ID: YYYY-MM-DD-XX)
      - **Next Tasks**:
        - [Next task 1 name] (not assigned yet)
        - [Next task 2 name] (Task ID: YYYY-MM-DD-XX)

      ## Task History

      | Task ID | Task Name | Status | Completion Date |
      |---|-----|-----|----|
      | YYYY-MM-DD-XX | [Task name] | [Status] | [Completion date] |

      ## Context

      [Additional context about the current tasks and projects]

      ## Recent Updates

      - [Update 1] (YYYY-MM-DD)
      - [Update 2] (YYYY-MM-DD)

      ## Command History

      ```
      # Recent commands executed as part of the workflow
      [Command 1]
      [Command 2]
      ```

      ## Notes

      - [Note 1]
      - [Note 2]

      ## Updated: YYYY-MM-DD
      ```

      ## Workflow Process

      ### Step 1: Capture Features

      1. Open `docs/features.md`
      2. Add new features with the following structure:
         ```markdown
         ### Feature X: [Title]

         - **Description**: Brief description
         - **Status**: [Not Started]
         - **Plan Document**: Not created yet
         - **Priority**: [High | Medium | Low]
         - **Created**: YYYY-MM-DD
         - **Updated**: YYYY-MM-DD
         ```

      ### Step 2: Create Plan Documents

      1. For high-priority features, create a plan document in `docs/plans/`
      2. Use the following prompt with the AI:
         ```
         Create a plan document for implementing [feature title]
         ```
      3. The AI will generate a structured plan based on the feature
      4. Review and refine the plan as needed

      ### Step 3: Generate Task Documents

      When you have a plan document open, ask the AI to generate task documents:

      ```
      Generate task documents from this plan
      ```

      **Before creating a new task document, you MUST check the `docs/tasks/` directory for existing task files for the current date. Use the next available sequence number (e.g., if `2025-05-02-01.md` exists, the next should be `2025-05-02-02.md`). Never overwrite an existing task file.**

      The AI will:
      1. Extract tasks from each phase
      2. Create individual task documents in `docs/tasks/`
      3. Name them with a pattern: `$(date +%Y-%m-%d)-XX.md` (current date + sequence number)
      4. Include all necessary details from the plan
      5. Update the memory file with new task information
      6. Update the plan document

      ### Step 4: Execute Tasks

      1. Prioritize tasks based on dependencies and complexity
      2. Assign tasks to team members
      3. Update task status as work progresses:
         - [Not Started]
         - [In Progress]
         - [Completed]

      ### Step 5: Update Task Status

      1. Open the task document
      2. Update the status field
      3. **When a task is completed:**
         - **You MUST move the task file to `docs/tasks/done/` (MANDATORY for both AI and users)**
         - Update the memory file
         - Update the plan document
      4. Ask the AI to update the feature status:

      > **Warning:** If completed task files are not moved to `docs/tasks/done/`, workflow tracking and reporting will be inaccurate. This step is required for all completed tasks.

      The AI will:
      1. Check all related tasks
      2. Update the feature status in the features document
      3. Move completed features to the "Completed Features" section when all tasks are done

      #### Rule Creation Task Completion

      When completing a task related to creating or updating a cursor rule:

      1. Follow the standard task completion steps (update status, move to done directory, etc.)
      2. Additionally, you MUST update the rule index file:
         - Open `.cursor/rules/00-rule-index.mdc`
         - Follow the "Automatic Index Updates" guidelines:
           - For new rules: Add entry to appropriate category table
           - For updated rules: Update description/category if changed
           - For renamed rules: Update all references
           - For removed rules: Remove the entry
         - Update the `total_rules` count in the Metadata section
         - Update the `last_updated` date in the Metadata section to today's date
      3. Request the AI to verify the rule index update with:
         ```
         update rule index
         ```
         or similar trigger phrases as documented in the rule index file.

      ### Step 6: Track Progress

      Use the following prompt to generate progress reports:

      ```
      Generate progress report for [feature title or ID]
      ```

      The AI will:
      1. Analyze all related tasks
      2. Calculate completion percentage
      3. Identify blockers or dependencies
      4. Generate a summary report

      ### Memory File Update Best Practices

      When updating memory files, follow these critical best practices to maintain coherence and prevent duplication:

      1. **Search for Existing Sections**: Before adding a new section, always check if a section with the same name already exists in the file
         - Use search functionality (Ctrl+F/Cmd+F) to find existing sections
         - If a section exists, merge into it rather than creating a duplicate

      2. **Proper Section Merging**: When updating existing sections, follow these guidelines:
         - **Lists**: Integrate new items at the top or bottom of the existing list, maintaining formatting consistency
         - **Tables**: Add new rows to existing tables, don't create duplicate tables
         - **Text**: Enhance existing paragraphs or add new paragraphs within the section
         - **Code Blocks**: Update existing code blocks or add new ones with clear comments

      3. **Timestamp Management**:
         - The `## Updated: YYYY-MM-DD` line must ALWAYS be the last line in the file
         - There should only be ONE such line per file
         - Always update this timestamp when making changes
         - Use the current date from `$(date +%Y-%m-%d)`

      4. **Handling the Current State Section**:
         - Always update the existing "Current State" section
         - Don't create a new one at the end of the file
         - Update all fields to reflect the current status

      5. **Task History Maintenance**:
         - Add new tasks to the existing Task History table
         - Sort by date (newest first) or status
         - Don't create duplicate Task History tables

      6. **Content Integration Examples**:

         **Example 1: Updating Lists**
         ```markdown
         # INCORRECT ❌
         ## Recent Updates
         - Update 1 (2025-05-01)
         - Update 2 (2025-05-02)

         ## Recent Updates
         - Update 3 (2025-05-03)
         ```

         ```markdown
         # CORRECT ✓
         ## Recent Updates
         - Update 3 (2025-05-03)
         - Update 1 (2025-05-01)
         - Update 2 (2025-05-02)
         ```

         **Example 2: Timestamp Placement**
         ```markdown
         # INCORRECT ❌
         ## Updated: 2025-05-01

         ## Recent Updates
         - New update (2025-05-02)

         ## Updated: 2025-05-02
         ```

         ```markdown
         # CORRECT ✓
         ## Recent Updates
         - New update (2025-05-02)

         ## Updated: 2025-05-02
         ```

      7. **Memory File Update Process**:
         - Open the memory file
         - Identify all sections that need updating
         - Search for each section name
         - Merge new content into existing sections
         - Add entirely new sections only if they don't exist
         - Ensure the Updated timestamp is the last line
         - Save the file

      ### Extending or Consolidating Existing Plans

      #### Extending a Plan

      1. Open the existing plan document
      2. Add new phases or tasks as needed
      3. Update dependencies to reflect the new structure
      4. Update the timeline to reflect the extended work
      5. Update the workflow-status.md file to reflect changes
      6. Consider generating new task documents for new tasks

      #### Consolidating Multiple Plans

      1. Identify the plans to be consolidated
      2. Create a new consolidated plan or update one of the existing plans:
         - Maintain the structure of the more comprehensive plan
         - Incorporate unique elements from all plans
         - Ensure coherent flow and logical organization
         - Align task dependencies and timeline
         - Document the consolidation in the plan's overview
      3. Update feature.md to reference the consolidated plan
      4. Update all task documents to reference the consolidated plan
      5. Update the workflow-status.md file to reflect the consolidation
      6. If removing a plan document, move it to an archive location

      ### Updating Workflow Status Memory File

      The workflow-status.md file should be updated after each significant change to maintain context:

      1. **When to Update**:
         - After creating new features or plans
         - After generating task documents
         - After updating task status
         - After completing major milestones
         - After consolidating or extending plans
         - After making significant workflow decisions

      2. **Update Process**:
         - Open docs/memory/workflow-status.md
         - Update the Current State section with:
           - Updated Current Date
           - Current Active Projects and Plans
           - Current Phases for each project
           - Updated Active Tasks list
           - Updated Next Tasks list
         - Add new entries to Task History if tasks have changed status
         - Update the Context section with relevant details
         - Add an entry to Recent Updates with the change and date
         - Add any relevant commands to Command History
         - Add or update Notes as needed

      3. **Example Update Flow**:
         ```
         1. Search for "## Current State" section and update it
         2. Search for "## Task History" and add new task entries
         3. Search for "## Recent Updates" and add new update entries
         4. Ensure the "## Updated: YYYY-MM-DD" line is at the very end with today's date
         5. Ensure no duplicate sections exist in the file
         ```

      ## Related Rules

      ### Memory Management Rule

      The AI-Assisted Agile Workflow integrates with the [memory-management](mdc:.cursor/rules/memory-management.mdc) rule to provide comprehensive context retention across conversations.

      - The Memory Management rule defines additional memory file types and templates
      - It provides guidelines for maintaining memory files and leveraging the knowledge graph
      - Together, these rules create a complete system for maintaining project context and workflow status

      ### Cursor Rule Cross-References

      The [cursor-rule-cross-references](mdc:.cursor/rules/cursor-rule-cross-references.mdc) rule defines the proper syntax for linking between files. When creating links in any Cursor rule, always use the proper `mdc:` syntax:

      ```markdown
      # For links to other Cursor rules
      [rule-name](mdc:.cursor/rules/rule-name.mdc)

      # For links to other files in the repository
      [filename](mdc:path/to/filename.ext)

      # Example: Linking to features.md
      [features document](mdc:docs/features.md)
      ```

      ## Templates

      All templates are stored in the `docs/templates/` directory:
      - `docs/templates/task-template.md`
      - `docs/templates/plan-template.md`

      ## File Linking Guidelines

      When creating links in your plan or task documents:

      1. **Within Cursor rules**: Always use the `mdc:` prefix for ALL file links:
         ```markdown
         [rule-name](mdc:.cursor/rules/rule-name.mdc)
         [features document](mdc:docs/features.md)
         ```

      2. **In regular documentation files**: Use standard markdown links:
         ```markdown
         [Plan Document](../plans/plan-name.md)
         [Feature Description](../features.md#feature-1-title)
         ```

      3. **For task documents**: When linking to plans, use relative paths:
         ```markdown
         [Implement a Hierarchical Rule Structure](../plans/cursor-rules-hierarchy.md)
         ```

      ## AI Commands Reference

      The following commands can be used with the AI assistant:

      | Command | Description |
      |---------|-------------|
      | `Create a plan document for [feature]` | Generates a new plan document |
      | `Generate task documents from this plan` | Creates task documents from the current plan |
      | `Update feature status based on completed tasks` | Updates the central document |
      | `Generate progress report for [feature]` | Creates a status report |
      | `Suggest next tasks to work on` | Recommends priority tasks |
      | `Show all blocked tasks` | Lists tasks with unmet dependencies |
      | `Mark task as completed` | Moves task to the done directory and updates status |
      | `Extend this plan with new phases` | Adds new phases to an existing plan |
      | `Consolidate plans for [feature1] and [feature2]` | Merges multiple plans |
      | `Update workflow status memory` | Updates the workflow-status.md file |
      | `Fix memory file sections` | Merges duplicate sections and ensures proper structure |
      | `Update rule index` | Updates the rule index to include new or modified rules |

      ## Example Workflow

      1. We identified several features for improving the project
      2. Created a plan document for a specific feature
      3. Generated task documents for the first phase of implementation
      4. As tasks are completed, we'll update their status
      5. The AI will help us track progress and update the central document

      ## Getting Started

      To start using this workflow:

      1. Ensure you have the required directory structure:
         ```
         docs/
         ├── features.md
         ├── plans/
         └── tasks/
         ```

      2. Open `docs/features.md` to view current features

      3. For any feature without a plan, ask the AI to create one:
         ```
         Create a plan document for Feature 2: Add New Authentication Method
         ```

      4. After reviewing the plan, generate tasks:
         ```
         Generate task documents from this plan
         ```

      5. Begin working on the generated tasks

examples:
  - input: |
      I have a new plan document for implementing the hierarchical rule structure. Can you generate task documents from it?
    output: |
      I'll help you generate task documents from your plan for implementing the hierarchical rule structure.

      Looking at your plan document, I can see the following distinct tasks:

      For Phase 1: Rule Relationship Mapping:
      1. Create a relationship diagram for all rules
      2. Define standard linking format
      3. Create rule registry file

      For Phase 2: Rule Content Updates:
      4. Add cross-references to each rule
      5. Create entry point rule
      6. Update examples with cross-references

      For Phase 3: Tooling and Integration:
      7. Create parser tool for validating references
      8. Create auto-update tool
      9. Develop visualization generator

      For Phase 4: Testing and Documentation:
      10. Test cross-references
      11. Create usage documentation
      12. Conduct integration testing with AI

      I'll generate task documents for each of these tasks using today's date ($(date +%Y-%m-%d)) for the task IDs.

      Task 1: Create a relationship diagram for all rules ($(date +%Y-%m-%d)-01)
      Task 2: Define standard linking format ($(date +%Y-%m-%d)-02)
      ...

      Each task document will include:
      - Description from the plan
      - Acceptance criteria
      - Dependencies
      - Complexity
      - Estimated effort

      I'll also update the plan document and the workflow status memory file to reflect these new tasks.

  - input: |
      This task has been completed. Please update the status.
    output: |
      I'll update the status of this completed task.

      Based on the current task document:
      1. Changing the status from "In Progress" to "Completed"
      2. Adding completion date ($(date +%Y-%m-%d))
      3. Moving this task file to the `docs/tasks/done/` directory
      4. Updating the workflow status memory file
      5. Updating the plan document

      The workflow status memory file has been updated with:
      - Task moved to completed tasks section
      - Task history updated with completion date
      - Next task identified and marked as current

      The plan document has been updated with:
      - This task moved to completed tasks section
      - Next task marked as active
      - Progress percentage updated

      Would you like me to generate a progress report for the related feature?

  - input: |
      I need to consolidate the memory-management-system.md plan into the existing memory-management.md plan.
    output: |
      I'll help you consolidate the memory-management-system.md plan into the existing memory-management.md plan.

      Here's my approach:

      1. First, I'll read both plan documents to understand their content and structure
      2. I'll create a consolidated version that:
         - Maintains the structure of the more comprehensive plan
         - Incorporates unique elements from both plans
         - Ensures a coherent flow with logical organization
         - Aligns task dependencies and timeline
         - Documents the consolidation in the overview section

      3. I'll update the memory-management.md file with the consolidated content
      4. I'll then delete the memory-management-system.md file since it's no longer needed
      5. Finally, I'll update the workflow-status.md memory file to reflect this consolidation

      After consolidation, I'll ensure that:
      - All feature references point to the consolidated plan
      - Task dependencies are properly aligned
      - The timeline is coherent and realistic
      - Any unique content from either plan is preserved

      Would you like me to proceed with this consolidation?

  - input: |
      I've completed the task to create a new TypeScript patterns rule. Please update the status.
    output: |
      I'll update the status of this completed task.

      Based on the current task document:
      1. Changing the status from "In Progress" to "Completed"
      2. Adding completion date ($(date +%Y-%m-%d))
      3. Moving this task file to the `docs/tasks/done/` directory
      4. Updating the workflow status memory file
      5. Updating the plan document

      Since this task involved creating a new cursor rule, I'll also update the rule index:
      1. Opening `.cursor/rules/00-rule-index.mdc`
      2. Adding the new rule to the "Coding Standards" category:
         ```markdown
         | [typescript-patterns](mdc:.cursor/rules/typescript-patterns.mdc) | Effective TypeScript patterns and practices for the monorepo | High |
         ```
      3. Updating the `total_rules` count from 23 to 24
      4. Updating the `last_updated` date to today's date ($(date +%Y-%m-%d))

      The rule index has been successfully updated to include the new TypeScript patterns rule.
      Would you like me to generate a progress report for the related feature?

  - input: |
      Generate a progress report for the User Management System feature.
    output: |
      # Progress Report: User Management System

      ## Overall Progress

      **Completion: 65%** (13/20 tasks completed)

      ## Phase Status

      | Phase | Completion | Tasks Completed | Tasks Remaining |
      |-------|------------|----------------|-----------------|
      | Authentication | 100% | 4/4 | 0 |
      | User Roles | 75% | 3/4 | 1 |
      | Profile Management | 60% | 6/10 | 4 |
      | Integration | 0% | 0/2 | 2 |

      ## Current Active Tasks

      1. Task ID: 2025-04-25-03 - Implement role permission verification
         - Status: Not Started
         - Assigned to: Unassigned
         - Blocking: 2 dependent tasks

      2. Task ID: 2025-05-02-01 - Add profile editing capabilities
         - Status: In Progress
         - Assigned to: AI Assistant
         - Dependencies: None

      ## Next Tasks in Queue

      1. Create admin dashboard
         - Complexity: High
         - Dependencies: Role permission verification

      2. Implement avatar upload feature
         - Complexity: Medium
         - Dependencies: None

      ## Blockers and Issues

      - No critical blockers identified
      - Scheduled tasks are progressing as expected

      ## Recommendations

      1. Complete Task 2025-04-25-03 to unblock dependent tasks
      2. Finish the profile editing implementation
      3. Begin planning for the integration phase

      ## Recent Milestones

      - Completed authentication system (2025-04-23)
      - Implemented basic role management (2025-05-02)
      - Added user profile storage (2025-05-02)

      Would you like more detailed information about any specific task or phase?

  - input: |
      I've noticed some duplicate sections in the workflow-status.md memory file. Please fix this issue.
    output: |
      I'll fix the duplicate sections in the workflow-status.md memory file.

      Looking at the file, I've identified several duplicated sections:
      - Multiple "Current State" sections
      - Duplicate "Task History" sections
      - Duplicate "Recent Updates" sections
      - Multiple "Context" sections
      - Duplicate "Updated:" timestamps

      I'll follow these steps to fix the issue:

      1. First, I'll read the entire file to understand its structure
      2. I'll identify all duplicate sections
      3. For each duplicate section:
         - I'll merge the content from both instances
         - Keep the most recent/complete information
         - Remove the duplicate section
      4. I'll ensure the "## Updated: YYYY-MM-DD" appears only once at the very end
      5. I'll maintain the proper logical structure of the document

      Let me make these corrections now...

      I've successfully merged:
      - Combined the duplicate "Current State" sections with the most up-to-date information
      - Merged the "Task History" tables, removing duplicated tasks
      - Combined the "Recent Updates" lists, preserving chronological order
      - Consolidated the "Context" sections, keeping all important information
      - Removed duplicate "Command History" and "Notes" sections
      - Ensured "## Updated: 2025-05-02" appears only once at the end

      The memory file now has a consistent structure with no duplicated sections, making it easier to maintain and understand.

metadata:
  priority: high
  version: 1.7
  tags:
    - workflow
    - agile
    - task-management
  changelog:
    - version: 1.7
      changes:
        - Added detailed "Memory File Update Best Practices" section with explicit guidelines
        - Added examples of correct and incorrect memory file updates
        - Added specific instructions for merging duplicate sections
        - Added guidance on handling the "Updated:" timestamp
        - Added new AI command for fixing memory file sections
    - version: 1.6
      changes:
        - Removed specific references to Cursor rules system
        - Made the workflow applicable to general project development
        - Updated examples to use generic project features
        - Modified progress report example to use a User Management System feature
    - version: 1.5
      changes:
        - Incorporated content from the AI-Assisted Agile Workflow Guide
        - Added clear step-by-step workflow process matching the guide's approach
        - Added complete Getting Started section
        - Reformatted AI Commands Reference as a table for better readability
        - Added a new example for generating progress reports
    - version: 1.4
      changes:
        - Added file linking guidelines section
        - Updated cursor-rule-cross-references section to show correct mdc: syntax for all file types
        - Added examples of links to different file types
    - version: 1.3
      changes:
        - Added process for extending or consolidating plans
        - Added detailed guidance for updating workflow-status.md
        - Added reference to cursor-rule-cross-references rule
        - Updated memory file template with more details
        - Added new AI commands for plan extension and consolidation
    - version: 1.2
      changes:
        - Initial version
</rule>
