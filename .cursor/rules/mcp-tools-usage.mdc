---
description: ALWAYS USE when REQUIRING external context to ENHANCE AI capabilities
globs:
alwaysApply: true
---
# Model Context Protocol (MCP) Tool Usage

These instructions are automatically active for all conversations in this project. All available tools (e.g., the `mcp_sequential-thinking_sequentialthinking` tool, `Brave Search`, `Tavily`, `Fetch`, `FireCrawl`, and Puppeteer) should be utilized as needed without requiring explicit activation.

<rule>
name: mcp_tools_usage
description: Guidelines for agents using tools provided by available Model Context Protocol (MCP) servers
filters:
  - type: message
    pattern: "(?i)(search web for X|scrape content from X|think through X step by step|explore X in depth)"

actions:
  - type: suggest
    message: |
      ## Activation Patterns
      - "search web for X": Trigger web search tools (Brave Search, Tavily)
      - "scrape content from X": Activate web scraping tools (FireCrawl, Puppeteer)
      - "think through X step by step": Invoke the `mcp_sequential-thinking_sequentialthinking` tool
      - "explore X in depth": Combine multiple tools for comprehensive analysis

      ## Success Patterns
      - Tools are used proactively without user prompting
      - Multiple tools are combined effectively
      - Tool outputs are validated and cross-referenced
      - Context is maintained across tool usage

      ## Tool Categories and Usage Guidelines

      ### Reasoning (using the `mcp_sequential-thinking_sequentialthinking` tool)
      - **Primary Use Cases:**
        - Complex problem decomposition
        - Multi-step solution planning
        - Decision tree analysis
        - Hypothesis validation
      - **Integration Pattern:**
        ```mermaid
        flowchart TD
            Start[Problem Identification] --> Think[`mcp_sequential-thinking_sequentialthinking` tool]
            Think --> Search[Web Search/Research]
            Search --> Conclude[Solution Formation]
            Conclude --> Document[Update Memory Files]
        ```

      ### Information Gathering (Brave Search, Puppeteer, FireCrawl)
      - Use **Brave Search, Puppeteer, and FireCrawl MCP servers** when troubleshooting, searching documentation, or exploring similar user issues.
      - Combine effectively with the **`mcp_sequential-thinking_sequentialthinking`** tool to refine solutions and acquire up-to-date information.
      - Prioritize reliable and concise sources.

examples:
  - input: |
      Can you search the web for the latest best practices for using Next.js with Tailwind CSS?
    output: |
      I'll search the web for the latest best practices for using Next.js with Tailwind CSS.

      First, let's search the web for the latest best practices for using Next.js with Tailwind CSS:
      <use_mcp_tool>brave_web_search "latest best practices for using Next.js with Tailwind CSS"</use_mcp_tool>

  - input: |
      Can you scrape the main content from the Vitest documentation homepage?
    output: |
      Okay, I will scrape the main content from the Vitest documentation homepage (https://vitest.dev/).
      <use_mcp_tool>firecrawl_scrape url="https://vitest.dev/" onlyMainContent=true</use_mcp_tool>

  - input: |
      Let's think through the steps to refactor this component.
    output: |
      Alright, let's break down the refactoring process step-by-step using the `mcp_sequential-thinking_sequentialthinking` tool.
      <use_mcp_tool>sequential-thinking_sequentialthinking thought="Step 1: Understand current component state and identify pain points." thoughtNumber=1 totalThoughts=5 nextThoughtNeeded=true</use_mcp_tool>

metadata:
  priority: high
  version: 2.0.0
  tags:
    - mcp
    - tool-usage
    - context-enrichment
</rule>
