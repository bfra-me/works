---
description: ALWAYS USE when REQUIRING external context to ENHANCE AI capabilities
globs:
alwaysApply: true
---
# Model Context Protocol (MCP) Tool Usage

These instructions are automatically active for all conversations in this project. All available tools (e.g., the `mcp_sequential-thinking_sequentialthinking` tool, `Brave Search`, `Tavily`, `Fetch`, `FireCrawl`, and Knowledge Graph/Memory tools like `mcp_memory_create_entities`) should be utilized as needed without requiring explicit activation.

<rule>
name: mcp_tools_usage
description: Guidelines for agents using tools provided by available Model Context Protocol (MCP) servers
filters:
  - type: message
    pattern: "(?i)(search web for X|scrape content from X|think through X step by step|remember X about Y|update memory with X|explore X in depth)"

actions:
  - type: suggest
    message: |
      ## Activation Patterns
      - "search web for X": Trigger web search tools (Brave Search, Tavily)
      - "scrape content from X": Activate web scraping tools (FireCrawl, Puppeteer)
      - "think through X step by step": Invoke the `mcp_sequential-thinking_sequentialthinking` tool
      - "remember X about Y": Access the knowledge graph
      - "update memory with X": Store new information in the knowledge graph
      - "explore X in depth": Combine multiple tools for comprehensive analysis

      ## Success Patterns
      - Tools are used proactively without user prompting
      - Multiple tools are combined effectively
      - Tool outputs are validated and cross-referenced
      - Knowledge is persistently stored
      - Context is maintained across tool usage

      ## Tool Categories and Usage Guidelines

      ### Reasoning (using the `mcp_sequential-thinking_sequentialthinking` tool)
      - **Primary Use Cases:**
        - Complex problem decomposition
        - Multi-step solution planning
        - Decision tree analysis
        - Hypothesis validation
      - **Integration Pattern:**
        ```mermaid
        flowchart TD
            Start[Problem Identification] --> Think[`mcp_sequential-thinking_sequentialthinking` tool]
            Think --> Search[Web Search/Research]
            Search --> Validate[Knowledge Graph Check]
            Validate --> Conclude[Solution Formation]
            Conclude --> Document[Update Memory]
        ```

      ### Information Gathering (Brave Search, Puppeteer, FireCrawl)
      - Use **Brave Search, Puppeteer, and FireCrawl MCP servers** when troubleshooting, searching documentation, or exploring similar user issues.
      - Combine effectively with the **`mcp_sequential-thinking_sequentialthinking`** tool to refine solutions and acquire up-to-date information.
      - Prioritize reliable and concise sources.

      ### Knowledge Graph (Memory)
      - Use the knowledge graph to store and retrieve information that persists across conversations.
      - Link related entities through meaningful relations that capture the nature of their connection.
      - Utilize specific tools like `mcp_memory_create_entities`, `mcp_memory_create_relations`, `mcp_memory_search_nodes`, `mcp_memory_add_observations`, etc.
      - **Knowledge Graph Update Template:**
        When updating the knowledge graph, document your changes using this format:
        ```markdown
        Knowledge Graph Updates:
        - Entity created: [EntityName] (Type: [EntityType])
          Observations: ["Observation 1", "Observation 2"]
        - Relation added: [EntityA] [relation_type] [EntityB]
        - Observations added to [EntityName]: ["New observation"]
        Rationale: [Brief explanation of why this update was necessary]
        ```

      ## Related Rules

      - [memory-management](mdc:.cursor/rules/memory-management.mdc): Defines memory structures often updated by KG tools.
      - [user-preferences-awareness](mdc:.cursor/rules/user-preferences-awareness.mdc): Uses KG tools to access preferences.
      - [repo-analyzer](mdc:.cursor/rules/repo-analyzer.mdc): Can use semantic search tools.
      - [date-consistency-enforcer](mdc:.cursor/rules/date-consistency-enforcer.mdc): Provides context for using the `mcp_time_get_current_time` tool.
      - [ai-agile-workflow](mdc:.cursor/rules/ai-agile-workflow.mdc): References the Sequential Thinking tool for workflow tasks.
      - [anthropic-chain-of-thought](mdc:.cursor/rules/anthropic-chain-of-thought.mdc): Provides structure for Sequential Thinking.
      - [vibe-tools](mdc:.cursor/rules/vibe-tools.mdc): Introduces CLI tools powered by MCP servers.
      - [monorepo-structure](mdc:.cursor/rules/monorepo-structure.mdc): Guidelines for monorepo architecture that may be analyzed using MCP tools.

examples:
  - input: |
      Can you search the web for the latest best practices for using Next.js with Tailwind CSS?
    output: |
      I'll search the web for the latest best practices for using Next.js with Tailwind CSS.

      First, let's search the web for the latest best practices for using Next.js with Tailwind CSS:
      <use_mcp_tool>brave_web_search "latest best practices for using Next.js with Tailwind CSS"</use_mcp_tool>

  - input: |
      Can you scrape the main content from the Vitest documentation homepage?
    output: |
      Okay, I will scrape the main content from the Vitest documentation homepage (https://vitest.dev/).
      <use_mcp_tool>firecrawl_scrape url="https://vitest.dev/" onlyMainContent=true</use_mcp_tool>

  - input: |
      Let's think through the steps to refactor this component.
    output: |
      Alright, let's break down the refactoring process step-by-step using the `mcp_sequential-thinking_sequentialthinking` tool.
      <use_mcp_tool>sequential-thinking_sequentialthinking thought="Step 1: Understand current component state and identify pain points." thoughtNumber=1 totalThoughts=5 nextThoughtNeeded=true</use_mcp_tool>

  - input: |
      What do we know about the 'eslint-config' package?
    output: |
      Let me check the knowledge graph for information about the 'eslint-config' package.
      <use_mcp_tool>memory_search_nodes query="eslint-config package"</use_mcp_tool>

  - input: |
      Remember to update the memory: the default branch is now 'main'.
    output: |
      Okay, I will update the knowledge graph to record that the default branch is 'main'. I'll add this as an observation to the relevant project or repository entity.
      <use_mcp_tool>memory_add_observations observations=[{"entityName": "bfra-me/works_repository", "contents": ["Default branch is 'main'"]}]</use_mcp_tool>

metadata:
  priority: high
  version: 1.1
  tags:
    - mcp
    - tool-usage
    - context-enrichment
  last_updated: 2025-05-06
  changelog:
    - version: 1.1
      changes:
        - Added bidirectional cross-reference to monorepo-structure.mdc
        - Updated metadata with version and last_updated information
    - version: 1.0
      changes:
        - Initial version
</rule>
