---
description: ALWAYS USE when EXPLORING rules to DISCOVER applicable guidance
globs:
alwaysApply: true
---
# Cursor Rules Index

This index provides a complete overview of all Cursor rules in the repository, organized by category. Use this as your entry point to discover relevant rules for specific tasks or contexts.

Cursor rules are specialized markdown documents (.mdc files) that provide conditional context to AI assistants during conversations in the Cursor IDE. They are NOT application features, code, or processes requiring testing or metrics.

Each rule contains structured guidance that helps the AI understand specific aspects of the codebase, development standards, or workflow preferences. Rules are activated conditionally based on conversation content, file types, or explicit requests, providing just-in-time context that improves the AI's ability to give relevant assistance.

Rules are simply well-formatted documents with:
1. Frontmatter defining activation conditions
2. Structured content providing guidance
3. Examples showing expected behavior
4. Metadata for organization purposes

Their sole purpose is to enhance AI conversations by supplying relevant contextual knowledge at the right moment. They should be treated as documentation/prompt engineering artifacts, not as software requiring traditional development practices.

## Quick References

- [Rule Creation Process](#development-rules)
- [Workflow & Process Rules](#workflow--process-rules)
- [Coding Standards](#coding-standards)
- [Configuration Guides](#configuration-guides)
- [Repository Structure](#repository-structure)
- [API Development](#api-development)
- [Development Tools](#development-tools)
- [AI & Memory Management](#ai--memory-management)

## Development Rules

Rules related to creating and managing Cursor rules themselves:

| Rule | Description | Priority |
|------|-------------|----------|
| [cursor-rules-creation](mdc:.cursor/rules/cursor-rules-creation.mdc) | FOLLOW when CREATING cursor rules to ENSURE consistency, correct location, linking, and activation | High |
| [repo-rule-recommender](mdc:.cursor/rules/repo-rule-recommender.mdc) | APPLY when RECOMMENDING new cursor rules to IMPROVE repository guidance | Medium |
| [rule-automation-script](mdc:.cursor/rules/rule-automation-script.mdc) | UTILIZE when AUTOMATING rule management to INCREASE efficiency | Medium |
| [rule-relationship-analysis](mdc:.cursor/rules/rule-relationship-analysis.mdc) | USE when ANALYZING rule relationships to ESTABLISH cross-references | Medium |

## Workflow & Process Rules

Rules related to development, release, and task management workflows:

| Rule | Description | Priority |
|------|-------------|----------|
| [ai-agile-workflow](mdc:.cursor/rules/ai-agile-workflow.mdc) | FOLLOW when MANAGING tasks to STREAMLINE progress tracking and ENSURE proper memory file management with vibe-tools integration | High |
| [changeset-workflow](mdc:.cursor/rules/changeset-workflow.mdc) | FOLLOW when VERSIONING packages to ENSURE proper changelogs and releases | High |
| [ci-cd-workflow](mdc:.cursor/rules/ci-cd-workflow.mdc) | CONSULT when TROUBLESHOOTING CI/CD issues to RESOLVE build failures | High |
| [code-review-standards](mdc:.cursor/rules/code-review-standards.mdc) | APPLY when REVIEWING code to MAINTAIN quality standards | High |
| [development-workflow](mdc:.cursor/rules/development-workflow.mdc) | FOLLOW when DEVELOPING features to OPTIMIZE workflow efficiency | High |
| [rule-acknowledgement](mdc:.cursor/rules/rule-acknowledgement.mdc) | APPLY when RESPONDING to ENSURE transparency and traceability | High |

## Coding Standards

Rules related to code style, patterns, and best practices:

| Rule | Description | Priority |
|------|-------------|----------|
| [anthropic-chain-of-thought](mdc:.cursor/rules/anthropic-chain-of-thought.mdc) | STRUCTURE when PROMPTING Anthropic models to ENHANCE reasoning quality | High |
| [date-consistency-enforcer](mdc:.cursor/rules/date-consistency-enforcer.mdc) | USE when HANDLING dates to PREVENT inconsistencies in timestamps | Medium |
| [testing-practices](mdc:.cursor/rules/testing-practices.mdc) | IMPLEMENT when WRITING tests to ENSURE comprehensive coverage | High |
| [typescript-patterns](mdc:.cursor/rules/typescript-patterns.mdc) | APPLY when WRITING TypeScript to MAINTAIN code quality standards | High |

## Configuration Guides

Rules related to configuring tools and packages:

| Rule | Description | Priority |
|------|-------------|----------|
| [eslint-config-usage](mdc:.cursor/rules/eslint-config-usage.mdc) | CONFIGURE when SETTING UP ESLint to ENFORCE consistent code style | High |
| [prettier-config-usage](mdc:.cursor/rules/prettier-config-usage.mdc) | IMPLEMENT when CONFIGURING Prettier to STANDARDIZE code formatting | High |

## Repository Structure

Rules related to repository organization and architecture:

| Rule | Description | Priority |
|------|-------------|----------|
| [dependency-management](mdc:.cursor/rules/dependency-management.mdc) | FOLLOW when MANAGING dependencies to PREVENT version conflicts | High |
| [monorepo-structure](mdc:.cursor/rules/monorepo-structure.mdc) | REFERENCE when NAVIGATING the monorepo to UNDERSTAND package relationships | High |
| [repo-analyzer](mdc:.cursor/rules/repo-analyzer.mdc) | UTILIZE when ANALYZING repository structure to LOCATE specific code | Medium |

## API Development

Rules related to API design and implementation:

| Rule | Description | Priority |
|------|-------------|----------|
| [api-design-standards](mdc:.cursor/rules/api-design-standards.mdc) | ADHERE when DESIGNING APIs to ENSURE consistency and type safety | High |

## Development Tools

Rules related to debugging, troubleshooting, and development aids:

| Rule | Description | Priority |
|------|-------------|----------|
| [debugging-guide](mdc:.cursor/rules/debugging-guide.mdc) | CONSULT when DEBUGGING issues to RESOLVE problems efficiently | High |

## AI & Memory Management

Rules related to AI assistants and memory management:

| Rule | Description | Priority |
|------|-------------|----------|
| [mcp-tools-usage](mdc:.cursor/rules/mcp-tools-usage.mdc) | LEVERAGE when REQUIRING external context to ENHANCE AI capabilities | High |
| [memory-management](mdc:.cursor/rules/memory-management.mdc) | ALWAYS USE when WORKING with memory files to PRESERVE context across sessions (includes auto-updates) | High |
| [self-improvement](mdc:.cursor/rules/self-improvement.mdc) | ALWAYS USE when OPERATING to MANDATE self-improvement and AVOID repeating mistakes | High |
| [user-preferences-awareness](mdc:.cursor/rules/user-preferences-awareness.mdc) | ALIGN when PROVIDING assistance to MATCH established user preferences | High |
| [vibe-tools](mdc:.cursor/rules/vibe-tools.mdc) | ALWAYS USE when ACCESSING external tools and context to SUPPORT development workflows | High |
| [vibe-tools-planning-review](mdc:.cursor/rules/vibe-tools-planning-review.mdc) | FOLLOW when PLANNING tasks or REVIEWING changes to ENHANCE workflow efficiency with AI assistance | Medium |

## Rule Maintenance

### Rule Application Types

Cursor rules can be configured to apply in different ways, depending on their purpose and intended usage:

#### Auto-Attached Rules

- **Configuration**: `alwaysApply: false` with specific `globs` patterns
- **Behavior**: Automatically activated when files matching the glob patterns are opened
- **Use Cases**: Language-specific guidance, file-type specific standards
- **Example**: TypeScript patterns rule that activates for `.ts` and `.tsx` files

#### Agent Requested Rules

- **Configuration**: `alwaysApply: false`, may omit `globs` if triggered by description content
- **Behavior**: AI can request these rules when relevant to the conversation
- **Use Cases**: Workflows, processes, general guidance
- **Example**: Repository analysis rule that can be requested when exploring the codebase

#### Always Applied Rules

- **Configuration**: `alwaysApply: true`
- **Behavior**: Applied to all conversations regardless of context
- **Use Cases**: Critical guidance that should always be available
- **Example**: Cross-reference syntax that applies to all documentation
- **Note**: Use sparingly to avoid excessive noise in conversations

#### Manual Rules

- **Configuration**: No special configuration required
- **Behavior**: Rule must be manually included in the chat window
- **Use Cases**: Specialized guidance that is only needed in specific circumstances
- **Example**: One-off or rarely used guidance

When categorizing a rule in this index, consider its application type to understand how it will be activated and used. The rule's frontmatter configuration should align with its intended application type.

### Versioning

All rules follow semantic versioning (MAJOR.MINOR.PATCH):
- **MAJOR**: Breaking changes to rule behavior or format
- **MINOR**: New functionality added in a backward-compatible manner
- **PATCH**: Backward-compatible bug fixes or minor content updates

### Adding New Rules

When adding new rules:
1. Create the rule file in `.cursor/rules/` following [cursor-rules-creation](mdc:.cursor/rules/cursor-rules-creation.mdc) guidelines
2. Add an entry to this index file in the appropriate category
3. Ensure proper versioning and metadata

### Updating Rules

When updating rules:
1. Increment the version number according to the nature of the change
2. Update this index if the rule's description or category has changed

### Automatic Index Updates

This index must be automatically updated whenever cursor rules are created, modified, or deleted by an AI agent, following these guidelines:

1. **Adding a New Rule**:
   - Identify the appropriate category for the new rule
   - Add a new row to the category's table, maintaining alphabetical order
   - Format: `| [rule-name](mdc:.cursor/rules/rule-name.mdc) | Brief description | Priority |`
   - Update the `total_rules` count in the Metadata section
   - Update the `last_updated` date in the Metadata section to today's date

2. **Updating an Existing Rule**:
   - If the rule description has changed, update the description in the appropriate table
   - If the rule's category has changed, move the rule from its current table to the appropriate category table
   - If the rule's priority has changed, update the priority in the table
   - Update the `last_updated` date in the Metadata section to today's date

3. **Removing a Rule**:
   - Remove the rule's row from the appropriate category table
   - Update the `total_rules` count in the Metadata section
   - Update the `last_updated` date in the Metadata section to today's date

4. **Renaming a Rule**:
   - Update all references to the rule in this index file
   - Ensure the link path uses the new filename: `[new-name](mdc:.cursor/rules/new-name.mdc)`
   - Update the `last_updated` date in the Metadata section to today's date

5. **Creating a New Category**:
   - If a rule doesn't fit into an existing category, create a new category section
   - Add the category to the Quick References section
   - Use the following format for the new category:
     ```
     ## Category Name

     Rules related to [brief description]:

     | Rule | Description | Priority |
     |------|-------------|----------|
     | [rule-name](mdc:.cursor/rules/rule-name.mdc) | Description text | Priority |
     ```
   - Update the `last_updated` date in the Metadata section to today's date

6. **Triggering Index Updates**:
   - To request an AI assistant to update this index, use phrases such as:
     - "update rule index"
     - "refresh cursor rules"
     - "synchronize rules"
     - "rebuild rule index"
   - The AI will:
     - Scan the `.cursor/rules/` directory for all current rules
     - Compare with the index entries to identify additions, removals, or changes
     - Update all tables to reflect the current state of rules
     - Reorder entries alphabetically within each category
     - Update the metadata section with the current date and rule count
   - Example request: "Please update the rule index to match the current rules in the directory"
   - The full pattern of recognized trigger phrases is:
     ```
     (?i)(update rule index|refresh rule index|synchronize rules?|update cursor index|update rule directory|refresh cursor rules?|rebuild rule index|reindex cursor rules?|sync rule index|update index with current rules?|regenerate rule index|align rule index|update rule catalog|refresh rule directory|reconcile rule index|update 00-rule-index|update rule-index\.mdc|update index to match rules?|refresh index file)
     ```

### Automated Maintenance Requirements

- **Only AI agents** (not scripts or external automation) are responsible for maintaining this index.
- Scripts may be used for scaffolding or validation, but not for rule enforcement or index updates.
- The agent must update this file as part of any rule operation, without requiring explicit user prompts.

## Metadata

```yaml
version: 1.8
last_updated: 2025-05-10
total_rules: 28
```
