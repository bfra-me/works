---
description: USE when AUTOMATING rule management to INCREASE efficiency
globs:
alwaysApply: false
---
# Rule Automation Script

<rule>
name: rule_automation_script
description: Shell script template for creating new Cursor rules with consistent structure
filters:
  - type: message
    pattern: "(?i)(rule script|automate rule|generate rule|rule template|script for rule)"

actions:
  - type: suggest
    message: |
      ## Cursor Rule Creation Script

      Here's a shell script that automates the creation of new Cursor rules with consistent structure. This makes the rule creation process repeatable and standardized.

      ### Script Overview

      Save this script to `scripts/create-cursor-rule.sh`:

      ```bash
      #!/usr/bin/env bash
      set -euo pipefail

      # Function to display script usage
      function display_usage {
        echo "Usage: $0 <rule-name> \"<rule-description>\" \"<glob-patterns>\""
        echo "Example: $0 typescript-testing \"Guidelines for writing TypeScript tests\" \"*.test.ts, *.spec.ts\""
        exit 1
      }

      # Check for required arguments
      if [ $# -lt 2 ]; then
        display_usage
      fi

      # Parse arguments
      RULE_NAME="$1"
      RULE_DESCRIPTION="$2"
      GLOB_PATTERNS="${3:-}"  # Optional glob patterns

      # Convert kebab-case to snake_case for rule name
      RULE_ID=$(echo "$RULE_NAME" | sed 's/-/_/g')

      # Ensure .cursor/rules directory exists
      mkdir -p .cursor/rules

      # Create rule file path
      RULE_FILE=".cursor/rules/${RULE_NAME}.mdc"

      # Check if file already exists
      if [ -f "$RULE_FILE" ]; then
        echo "Error: Rule file $RULE_FILE already exists."
        exit 1
      fi

      # Create rule file with template
      cat > "$RULE_FILE" << EOF
      ---
      description: ${RULE_DESCRIPTION}
      globs: ${GLOB_PATTERNS}
      alwaysApply: false
      ---

      # ${RULE_NAME^}

      <rule>
      name: ${RULE_ID}
      description: ${RULE_DESCRIPTION}
      filters:
        - type: file_extension
          pattern: ""
        - type: file_path
          pattern: ""
        - type: content
          pattern: ""
        - type: message
          pattern: "(?i)(${RULE_NAME})"

      actions:
        - type: suggest
          message: |
            ## ${RULE_NAME^} Guide

            Detailed guidance for ${RULE_NAME} goes here...

      examples:
        - input: |
            How do I use ${RULE_NAME}?
          output: |
            Here's how to use ${RULE_NAME}:

            1. First step
            2. Second step
            3. Third step
      </rule>
      EOF

      echo "Created Cursor rule at $RULE_FILE"
      echo "Now edit the file to complete your rule!"
      ```

      ### Making the Script Executable

      ```bash
      chmod +x scripts/create-cursor-rule.sh
      ```

      ### Using the Script

      ```bash
      # Basic usage
      ./scripts/create-cursor-rule.sh rule-name "Rule description" "glob1, glob2"

      # Example: Create TypeScript testing rule
      ./scripts/create-cursor-rule.sh typescript-testing "Guidelines for writing effective TypeScript tests" "*.test.ts, *.spec.ts, vitest.config.*"
      ```

      ### Script Features

      - Automatically converts kebab-case filename to snake_case rule ID
      - Creates proper frontmatter with description and globs
      - Sets up standard rule structure with placeholders
      - Includes default example interaction
      - Prevents accidental overwriting of existing rules

      ### Next Steps After Running the Script

      After creating the rule template with the script:

      1. Open the generated file in your editor
      2. Fill in the detailed filter patterns
      3. Add comprehensive guidance in the message section
      4. Create realistic examples
      5. Test the rule with files that should trigger it
      6. Update the rule index ([00-rule-index.mdc](mdc:.cursor/rules/00-rule-index.mdc)) with the new rule

      ### Enhancing the Script

      You can extend this script with additional features:

      - Template selection for different rule types
      - Interactive prompting for filter patterns
      - Validation of rule content
      - Automatic deployment to other repositories

      After running the script, open the generated file and customize the filters, content, and examples to complete your rule.

      ## Related Rules

      - [cursor-rules-creation](mdc:.cursor/rules/cursor-rules-creation.mdc): Provides the detailed guidelines this script helps automate.
      - [00-rule-index](mdc:.cursor/rules/00-rule-index.mdc): The index file that needs to be updated after creating a new rule.
      - [cursor-rules-location](mdc:.cursor/rules/cursor-rules-location.mdc): Defines the correct location for rule files, which this script adheres to.

examples:
  - input: |
      Can you create a script to automate Cursor rule creation?
    output: |
      Here's a shell script to automate Cursor rule creation with a standardized template:

      ```bash
      #!/usr/bin/env bash
      set -euo pipefail

      # Function to display script usage
      function display_usage {
        echo "Usage: $0 <rule-name> \"<rule-description>\" \"<glob-patterns>\""
        echo "Example: $0 typescript-testing \"Guidelines for writing TypeScript tests\" \"*.test.ts, *.spec.ts\""
        exit 1
      }

      # Check for required arguments
      if [ $# -lt 2 ]; then
        display_usage
      fi

      # Parse arguments
      RULE_NAME="$1"
      RULE_DESCRIPTION="$2"
      GLOB_PATTERNS="${3:-}"  # Optional glob patterns

      # Convert kebab-case to snake_case for rule name
      RULE_ID=$(echo "$RULE_NAME" | sed 's/-/_/g')

      # Ensure .cursor/rules directory exists
      mkdir -p .cursor/rules

      # Create rule file path
      RULE_FILE=".cursor/rules/${RULE_NAME}.mdc"

      # Check if file already exists
      if [ -f "$RULE_FILE" ]; then
        echo "Error: Rule file $RULE_FILE already exists."
        exit 1
      fi

      # Create rule file with template
      cat > "$RULE_FILE" << EOF
      ---
      description: ${RULE_DESCRIPTION}
      globs: ${GLOB_PATTERNS}
      alwaysApply: false
      ---

      # ${RULE_NAME^}

      <rule>
      name: ${RULE_ID}
      description: ${RULE_DESCRIPTION}
      filters:
        - type: file_extension
          pattern: ""
        - type: file_path
          pattern: ""
        - type: content
          pattern: ""
        - type: message
          pattern: "(?i)(${RULE_NAME})"

      actions:
        - type: suggest
          message: |
            ## ${RULE_NAME^} Guide

            Detailed guidance for ${RULE_NAME} goes here...

      examples:
        - input: |
            How do I use ${RULE_NAME}?
          output: |
            Here's how to use ${RULE_NAME}:

            1. First step
            2. Second step
            3. Third step
      </rule>
      EOF

      echo "Created Cursor rule at $RULE_FILE"
      echo "Now edit the file to complete your rule!"
      ```

      Save this script to `scripts/create-cursor-rule.sh`, make it executable with `chmod +x scripts/create-cursor-rule.sh`, and use it to generate new rules:

      ```bash
      ./scripts/create-cursor-rule.sh changeset-workflow "Guide to using Changesets for versioning" ".changeset/*.md"
      ```

      The script will:
      1. Create a rule file with proper frontmatter
      2. Set up the standard rule structure
      3. Add placeholder content you can easily edit
      4. Convert your kebab-case filename to snake_case for the rule ID

      After running the script, open the generated file and customize the filters, content, and examples to complete your rule.

metadata:
  priority: medium
  version: 1.0
  tags:
    - automation
    - script
    - cursor-rules
  changelog:
    - version: 1.0
      changes:
        - Initial version
</rule>
