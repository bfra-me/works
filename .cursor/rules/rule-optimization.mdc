---
description: FOLLOW when OPTIMIZING large or complex cursor rules to REDUCE token usage while MAINTAINING functionality
globs:
alwaysApply: false
---
# Rule Optimization Strategy

Guidelines for streamlining large Cursor rules to improve efficiency without sacrificing functionality.

<rule>
name: rule_optimization
description: FOLLOW when OPTIMIZING large or complex cursor rules to REDUCE token usage while MAINTAINING functionality
filters:
  - type: file_path
    pattern: "\\.cursor/rules/.*\\.mdc$"
  - type: message
    pattern: "(?i)(optimize rule|streamline rule|reduce rule size|rule is too long|token efficiency)"
  - type: content
    pattern: "(?i)(large rule|lengthy rule|token limit|rule efficiency|streamline)"

actions:
  - type: suggest
    message: |
      # Rule Optimization Strategy

      This strategy provides a systematic approach to streamline large, complex Cursor rules by focusing on orchestration rather than duplication.

      ## Core Principles

      1. **Orchestrate, Don't Duplicate** - Focus rules on process flow and organization rather than embedding detailed content
      2. **Delegate to Specialized Rules** - Move specialized knowledge to dedicated rules and reference them
      3. **Leverage Templates and Examples** - Use external files for templates rather than embedding them
      4. **Cross-Reference Effectively** - Use proper `mdc:` syntax to maintain connections between related content
      5. **Minimize Token Usage** - Reduce unnecessary verbosity while preserving essential functionality
      6. **Enhance Maintainability** - Create a structure that's easier to update and keep synchronized

      ## Optimization Methodology

      ### 1. Analyze the Current Rule

      Before optimizing, thoroughly assess the rule to identify:

      - **Core Purpose** - The fundamental function the rule serves
      - **Process Flow** - The sequential steps or logic the rule defines
      - **Implementation Details** - Specific "how-to" instructions that could be delegated
      - **Embedded Templates** - Markdown templates that consume significant tokens
      - **Example Sections** - Detailed examples that could be condensed or externalized
      - **Duplicated Information** - Content also found in other rules

      ### 2. Design the Streamlined Structure

      Create a minimalist structure that focuses on:

      - **Process Orchestration** - Clear sequence of steps with transitions
      - **Key Decision Points** - Essential triggers for rule application
      - **Cross-References** - Links to specialized rules for details
      - **Concise Examples** - Minimal examples that demonstrate core functionality

      Example minimalist structure:
      ```markdown
      # Rule Title

      ## Core Principles (brief list of 4-6 key principles)

      ## Process Stages
      1. Stage 1 (concise paragraph with key tools + link to template)
      2. Stage 2 (concise paragraph with key tools + link to template)
      3. Stage n (concise paragraph with key tools + link to template)

      ## Quick Reference (brief table or list)
      ```

      ### 3. Extract Templates to External Files

      For embedded templates that consume significant tokens:

      1. Create dedicated template files in `docs/templates/`
      2. Replace embedded templates with links using `mdc:` syntax
      3. Ensure templates are well-structured and self-explanatory

      ### 4. Create Supporting Documentation

      For detailed examples, command references, or automation scripts:

      1. Create or update complementary documentation in `docs/memory/`
      2. Use meaningful file names that clearly indicate content purpose
      3. Structure documents with clear sections and navigation
      4. Reference these documents from the streamlined rule

      ### 5. Update Cross-References

      Ensure all connections between components are maintained:

      1. Use proper `mdc:` syntax for all references
      2. Include section anchors for specific reference points (e.g., `mdc:path/to/file.md#section-name`)
      3. Verify all links resolve correctly

      ### 6. Validate the Optimization

      Before finalizing, verify the optimization:

      1. Review the streamlined rule for clarity and coherence
      2. Confirm all essential information remains accessible
      3. Ensure cross-references lead to the correct destinations
      4. Verify the rule still fulfills its original purpose
      5. Check that all embedded external files are properly created and formatted

      ## Optimization Examples

      ### Before: Embedded Template

      ```markdown
      ## Document Templates

      ### Feature Template

      ```markdown
      # Feature: [Title]

      ## Description
      [Detailed description]

      ## Acceptance Criteria
      - Criterion 1
      - Criterion 2
      - Criterion 3

      ## Dependencies
      - Dependency 1
      - Dependency 2

      ## Implementation Notes
      [Notes on implementation]
      ```
      ```

      ### After: External Template Reference

      ```markdown
      ## Document Templates

      Create feature documents using the standardized [Feature Template](mdc:docs/templates/feature-template.md).
      ```

      ### Before: Detailed Process Description

      ```markdown
      ## Task Generation Process

      1. First, retrieve the plan document from the location specified.
      2. Analyze the plan document to identify individual tasks.
      3. For each task in the plan:
         - Generate a unique task ID using the format YYYY-MM-DD-XX
         - Create a new task document with the task name
         - Add detailed description based on the plan
         - Copy acceptance criteria from the plan
         - Set initial status to "Not Started"
         - Save the task document to the appropriate location
      4. Update the task tracking system with new tasks
      5. Create dependencies between tasks as specified in the plan
      ```

      ### After: Focused Process with References

      ```markdown
      ## Task Generation Process

      Generate task documents from plans with clear acceptance criteria and dependencies. Use [Task Template](mdc:docs/templates/task-template.md) and follow the [task ID generation protocol](mdc:.cursor/rules/date-consistency-enforcer.mdc#id-generation).

      For detailed steps, see [Task Management Guide](mdc:docs/memory/task-management-guide.md).
      ```

      ## Common Optimization Patterns

      1. **Replace Code Blocks with References**
         - Before: Embedding full code examples
         - After: "See [implementation example](mdc:path/to/example.md)"

      2. **Condense Repetitive Structures**
         - Before: Detailed lists of similar items
         - After: "Follow this pattern for all components (see [complete list](mdc:path/to/list.md))"

      3. **Extract Detailed Guides**
         - Before: Step-by-step instructions embedded in rules
         - After: Brief summary with link to complete guide

      4. **Consolidate Multiple Examples**
         - Before: Many detailed examples for different scenarios
         - After: One canonical example with link to comprehensive examples file

examples:
  - input: |
      The memory-management.mdc rule is getting too long and complex. How can I optimize it?
    output: |
      I'll help you optimize the memory-management.mdc rule by applying the Rule Optimization Strategy.

      First, let's analyze the current rule to identify:
      - Its core purpose (memory file management guidelines)
      - Process flows (creating, updating, and accessing memory files)
      - Implementation details that could be delegated
      - Embedded templates that consume tokens
      - Examples that could be externalized

      Based on this analysis, here's how we can streamline the rule:

      1. Create a minimalist structure focused on:
         - Core memory management principles
         - Essential file types and their purposes
         - Key update protocols
         - Cross-references to detailed guides

      2. Extract memory file templates to dedicated files:
         - Create template files in docs/templates/ for each memory file type
         - Replace embedded templates with mdc: links

      3. Move detailed examples to a memory-management-examples.md file:
         - Include only 2-3 essential examples in the rule
         - Move comprehensive examples to the external file

      4. Delegate specialized knowledge:
         - Knowledge Graph operations → mcp-tools-usage.mdc
         - Date handling → date-consistency-enforcer.mdc
         - Sequential thinking → mcp-tools-usage.mdc

      This approach will significantly reduce token usage while maintaining all functionality through proper cross-references.

      Would you like me to implement these optimizations for you?

  - input: |
      How would I apply this strategy to optimize a rule with many embedded code examples?
    output: |
      To optimize a rule with many embedded code examples:

      1. Create a dedicated examples file:
         - Create `docs/memory/rule-name-examples.md` with all code examples
         - Organize examples by category with clear headings
         - Include context for each example

      2. In the streamlined rule:
         - Keep only 1-2 essential examples that demonstrate core concepts
         - Replace other examples with targeted references: "For authentication examples, see [Rule Examples](mdc:docs/memory/rule-name-examples.md#authentication)"
         - Add a general reference: "Additional examples are available in the [comprehensive examples file](mdc:docs/memory/rule-name-examples.md)"

      3. Focus the rule content on:
         - Principles behind the code patterns
         - Decision criteria for choosing between approaches
         - Brief implementation guidance with links to details

      4. Consider creating template files:
         - For reusable code patterns, create templates in docs/templates/
         - Reference these templates instead of embedding full code blocks

      5. Use proper cross-references:
         - Link to specific sections in your examples file using anchors
         - Reference related rules that provide context for the code

      This approach maintains access to all examples while significantly reducing the rule's token usage.

metadata:
  priority: medium
  version: 1.0.0
  tags:
    - rule-management
    - optimization
    - documentation
    - token-efficiency
    - cross-referencing
</rule>
