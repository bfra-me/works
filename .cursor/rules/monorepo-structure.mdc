---
description: USE when NAVIGATING the monorepo to UNDERSTAND package relationships
globs: *,**/*
alwaysApply: true
---
# Monorepo Structure Guidelines

Standards for working with the bfra.me/works monorepo architecture.

<rule>
name: monorepo_structure
description: Guidelines for understanding and navigating the monorepo structure
filters:
  - type: message
    pattern: "(?i)(monorepo|workspace|package structure|repository structure|pnpm workspace)"

actions:
  - type: suggest
    message: |
      # bfra-me/works Monorepo Structure

      This repository is organized as a monorepo using pnpm workspaces with the following structure:

      ```
      works/
      ├── packages/              # Main directory containing individual packages
      │   ├── create/            # Package generator/scaffolding tool
      │   ├── eslint-config/     # ESLint configuration presets
      │   ├── prettier-config/   # Prettier configuration presets
      │   ├── prettier-plugins/  # Custom Prettier plugins
      │   ├── semantic-release/  # Tools related to semantic versioning
      │   └── tsconfig/          # TypeScript configuration presets
      ├── scripts/               # Utility scripts for repository management
      ├── .github/               # GitHub-related configurations (workflows, etc.)
      ├── pnpm-workspace.yaml    # Workspace configuration
      └── package.json           # Root package configuration
      ```

      ## Key Package Relationships

      1. **@bfra.me/works** (root)
         - The container for all packages
         - Provides common scripts and workflows
         - Not published to npm (`private: true`)

      2. **@bfra.me/create**
         - Depends on: None (independent)
         - Used by: New package creation
         - Purpose: Generate new packages with standardized templates

      3. **@bfra.me/eslint-config**
         - Depends on: ESLint plugins
         - Used by: All packages for linting
         - Purpose: Provide consistent ESLint configurations

      4. **@bfra.me/prettier-config**
         - Depends on: Prettier
         - Used by: All packages for formatting
         - Purpose: Provide consistent Prettier configurations

      5. **@bfra.me/prettier-plugins**
         - Depends on: Prettier
         - Used by: Custom formatting needs
         - Purpose: Extend Prettier functionality

      6. **@bfra.me/semantic-release**
         - Depends on: semantic-release
         - Used by: Release automation
         - Purpose: Provide typed configurations for semantic-release

      7. **@bfra.me/tsconfig**
         - Depends on: TypeScript
         - Used by: All TypeScript packages
         - Purpose: Provide consistent TypeScript configurations

      8. **@bfra.me/scripts** (internal)
         - Depends on: Internal packages
         - Used by: Repository maintenance
         - Purpose: Automate repository tasks

      ## Workspace Configuration

      The workspace is configured in `pnpm-workspace.yaml`:

      ```yaml
      packages:
        - .
        - 'packages/*'
        - scripts
      ```

      This configuration:
      - Treats the root directory as a package
      - Includes all directories under packages/
      - Treats the scripts directory as a separate package
      - Enables packages to reference each other using `workspace:*`

      ## Creating New Packages

      To create a new package within the monorepo:

      1. Use the `@bfra.me/create` package:
         ```bash
         pnpm dlx @bfra.me/create my-new-package --template default
         ```

      2. Add it to the workspace by placing it in the `packages/` directory

      3. Reference other workspace packages using `workspace:*` in package.json:
         ```json
         {
           "dependencies": {
             "@bfra.me/tsconfig": "workspace:*"
           }
         }
         ```

      4. Use the common development scripts from the root package:
         - `pnpm dev` - Development mode
         - `pnpm build` - Build all packages
         - `pnpm test` - Run tests across all packages
         - `pnpm lint` - Run linting checks

examples:
  - input: |
      How is this monorepo structured? I'm trying to understand the relationship between packages.
    output: |
      This repository is organized as a monorepo using pnpm workspaces with packages in the `packages/` directory.

      The main packages are:
      - `create`: A scaffolding tool for generating new packages
      - `eslint-config`: ESLint configuration presets
      - `prettier-config`: Prettier configuration presets
      - `prettier-plugins`: Custom Prettier plugins
      - `semantic-release`: Semantic versioning tools
      - `tsconfig`: TypeScript configuration presets
      - `scripts`: Utility scripts for repository management

      Packages can reference each other using `workspace:*` in their dependencies, and common development scripts are provided at the root level (dev, build, test, lint).

      The workspace configuration in `pnpm-workspace.yaml` includes the root directory, all packages under `packages/`, and the `scripts` directory.

metadata:
  priority: high
  version: 1.0
  tags:
    - monorepo
    - architecture
    - workspace
</rule>
