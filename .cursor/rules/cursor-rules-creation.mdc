---
description: Step-by-step guide for creating and maintaining cursor rules in this repository
globs:
alwaysApply: true
---
# Cursor Rules Creation Process

<rule>
name: cursor_rules_creation
description: Step-by-step guide for creating and maintaining cursor rules in this repository
filters:
  - type: message
    pattern: "(?i)(cursor rule|create rule|add rule|new rule|rule creation)"
  - type: file_path
    pattern: "\\.cursor/rules/.*\\.mdc$"

actions:
  - type: suggest
    message: |
      ## Cursor Rules Creation Process

      This guide outlines the systematic process for creating and maintaining cursor rules in the bfra.me/works repository.

      ### 1. Rule Planning

      Before creating a new rule, plan its purpose and structure:

      1. **Identify Need**: Determine what guidance developers need
      2. **Check Existing Rules**: Avoid duplication with existing rules in `.cursor/rules/`
      3. **Define Scope**: Decide which files or patterns the rule should target
      4. **Plan Structure**: Outline the key sections of your rule

      ### 2. Rule Creation

      #### File Location and Naming

      - All rules must be stored in the `.cursor/rules/` directory
      - Use kebab-case for filenames with `.mdc` extension (e.g., `typescript-patterns.mdc`)
      - Choose descriptive names that reflect the rule's purpose

      #### Frontmatter Structure

      Every rule must start with YAML frontmatter:

      ```yaml
      ---
      description: Concise description of what the rule provides guidance on
      globs: pattern1, pattern2, pattern3 # Patterns for auto-attachment
      alwaysApply: false # Typically false for auto-attachment via globs
      ---
      ```

      The `globs` field determines which files will automatically trigger the rule. Examples:
      - `*.ts, *.tsx` - All TypeScript files
      - `.changeset/*.md` - All changeset files
      - `package.json, pnpm-workspace.yaml` - Specific configuration files

      #### Rule Content Structure

      After the frontmatter, include:

      1. **Title**: Main heading for the rule
      2. **Rule Element**: Wrapped in `<rule>...</rule>` tags
         - `name`: Unique identifier in snake_case
         - `description`: Brief description of the rule
         - `filters`: Conditions for when the rule applies
         - `actions`: What happens when the rule is triggered
         - `examples`: Sample interactions showing rule usage

      Basic template:

      ```markdown
      # Rule Title

      <rule>
      name: rule_name
      description: Detailed description of the rule's purpose

      filters:
        - type: file_extension
          pattern: "\\.ext$"
        - type: content
          pattern: "specific_pattern"

      actions:
        - type: suggest
          message: |
            ## Main Heading

            Your detailed guidance here...

      examples:
        - input: |
            User question about this topic?
          output: |
            Helpful response to that question

      metadata:
        priority: high
        version: 1.0
        tags:
          - tag1
          - tag2
        changelog:
          - version: 1.0
            changes:
              - Initial version
      </rule>
      ```

      ### 3. Common Filter Types

      - `file_extension`: Match files by extension (e.g., `"\\.ts$"`)
      - `file_path`: Match specific file paths (e.g., `"package\\.json$"`)
      - `content`: Match file content (e.g., `"import|export"`)
      - `message`: Match user messages (e.g., `"(?i)(help|guide)"`)

      ### 4. Content Guidelines

      - **Be Specific**: Focus on concrete guidance for this repository
      - **Use Examples**: Include practical code examples relevant to the codebase
      - **Structure Hierarchically**: Use headings and lists for clear organization
      - **Include Sample Interactions**: Demonstrate how the rule should be used
      - **Reference Repository Files**: Use `[filename.ext](mdc:path/to/filename.ext)` syntax

      ### 5. Testing Rules

      After creating a rule:

      1. Verify the rule appears for the intended files
      2. Test with different queries to ensure proper triggering
      3. Check that guidance is helpful and accurate

      ### 6. Updating Rules

      When updating existing rules:

      1. Maintain consistent frontmatter structure
      2. Preserve the rule name to maintain continuity
      3. Update the description if scope changes
      4. Add new examples as usage patterns evolve
      5. Keep filters current with repository changes
      6. Update the version and changelog in the metadata section

      #### Renaming Rule Files

      When you need to rename a Cursor rule file:

      1. **Identify all references**: Before renaming, search for all references to the file:
         ```bash
         # Search for references to the original filename
         grep -r "original-name\.mdc" .
         grep -r "original-name\.md" .  # Also check for incorrect extensions
         ```

      2. **Use terminal for renaming**: Use the `mv` command to rename the file:
         ```bash
         # Example: Renaming a rule file
         mv .cursor/rules/original-name.mdc .cursor/rules/new-name.mdc
         ```

      3. **Preserve frontmatter**: Ensure the frontmatter is preserved during renaming. Don't modify the content unless necessary.

      4. **Update references**: Update all references to the file:
         - Task documentation in `docs/tasks/*.md`
         - Scripts that process rule files
         - Links from other cursor rules (using the proper `mdc:` syntax)
         - Documentation files that reference the rule

      5. **Verify the changes**: Ensure the renamed file works correctly:
         - Check that the rule appears in the appropriate contexts
         - Verify links to the rule work from other documents
         - Test any scripts that interact with the rule files

      6. **Update the version**: Increment the version number of the rule and add a changelog entry about the rename.

      ### 7. Rule Metadata and Version Control

      Every rule must include a metadata section at the end of the `<rule>` element for version control:

      ```yaml
      metadata:
        priority: [high|medium|low]
        version: [MAJOR.MINOR.PATCH]
        tags:
          - [tag1]
          - [tag2]
        changelog:
          - version: [MAJOR.MINOR.PATCH]
            changes:
              - [Change description 1]
              - [Change description 2]
      ```

      #### Version Control Guidelines

      - **Priority**: Indicate importance (high, medium, low)
      - **Version**: Use semantic versioning (MAJOR.MINOR.PATCH)
        - MAJOR: Breaking changes
        - MINOR: New features
        - PATCH: Bug fixes and minor updates
      - **Tags**: Include relevant categories (workflow, formatting, etc.)
      - **Changelog**: Document history with most recent versions first

      The full version control template is available at [version-control-template.md](mdc:docs/templates/version-control-template.md).

      #### Updating Versions

      When updating a rule:
      1. Increment the version number based on the nature of changes
      2. Add a new changelog entry with the specific changes
      3. Place the new version at the top of the changelog list
      4. Update the `version` field to match the new version

      ### 8. Rule Types by Application Mode

      #### Auto-Attached Rules

      - Set `alwaysApply: false`
      - Include specific `globs` patterns
      - Example use cases: language-specific guidance, file-type specific guidance

      #### Agent Requested Rules

      - Set `alwaysApply: false`
      - May omit `globs` if triggered by description content
      - Example use cases: workflows, processes, general guidance

      #### Always Applied Rules

      - Set `alwaysApply: true`
      - Apply to all conversations regardless of context
      - Use sparingly for critical guidance only

examples:
  - input: |
      How do I create a new cursor rule for TypeScript testing practices?
    output: |
      To create a new cursor rule for TypeScript testing practices:

      1. **Plan your rule first**:
         - It should cover Vitest usage, test patterns, and best practices
         - Target test files and configuration in the repository
         - Avoid duplicating content from the existing typescript-patterns rule

      2. **Create the rule file**:
         ```bash
         touch .cursor/rules/typescript-testing.mdc
         ```

      3. **Add the frontmatter**:
         ```yaml
         ---
         description: Guidelines for writing effective TypeScript tests with Vitest in the bfra.me/works monorepo
         globs: *.test.ts, *.spec.ts, vitest.config.*
         alwaysApply: false
         ---
         ```

      4. **Add the title and rule structure**:
         ```markdown
         # TypeScript Testing Practices

         <rule>
         name: typescript_testing
         description: Best practices for writing and organizing TypeScript tests using Vitest

         filters:
           - type: file_extension
             pattern: "\\.test\\.ts$|\\.spec\\.ts$"
           - type: file_path
             pattern: "vitest\\.config\\.(ts|js)$"
           - type: content
             pattern: "describe|it|test|expect|vi\\."

         actions:
           - type: suggest
             message: |
               ## Vitest Testing Guidelines

               // Your detailed guidance here...

         examples:
           - input: |
               How should I structure my test file?
             output: |
               // Your example response here...

         metadata:
           priority: high
           version: 1.0
           tags:
             - testing
             - typescript
             - vitest
           changelog:
             - version: 1.0
               changes:
                 - Initial version
         </rule>
         ```

      5. **Fill in the detailed guidance** with specifics about:
         - Test file organization
         - Mocking approaches
         - Assertion patterns
         - Setup and teardown practices

      6. **Test your rule** by opening a test file to verify it triggers correctly.

      This approach follows our repository's cursor rule creation process and will provide consistent guidance for TypeScript testing across the codebase.

metadata:
  priority: high
  version: 1.2
  tags:
    - cursor-rules
    - documentation
    - process
  changelog:
    - version: 1.2
      changes:
        - Added subsection on renaming rule files with step-by-step guidelines
        - Included best practices for preserving references when renaming files
    - version: 1.1
      changes:
        - Added section on rule metadata and version control
        - Added link to version control template
        - Updated rule template to include metadata section
    - version: 1.0
      changes:
        - Initial version
</rule>
