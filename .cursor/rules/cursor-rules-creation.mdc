---
description: FOLLOW when CREATING cursor rules to ENSURE consistency and effective conditional activation
globs: *.mdc
alwaysApply: false
---
# Cursor Rules Creation Guide

<rule>
name: cursor_rules_creation
description: FOLLOW when CREATING cursor rules to ENSURE consistency and effective conditional activation
filters:
  - type: message
    pattern: "(?i)(cursor rule|create rule|add rule|new rule|rule creation)"
  - type: file_path
    pattern: "\\.cursor/rules/.*\\.mdc$"

actions:
  - type: suggest
    message: |
      ## Introduction: What Are Cursor Rules?
      Cursor rules are specialized markdown documents (`.mdc` files) that provide conditional context to AI assistants in the Cursor IDE. They are **not** application features, code, or processes requiring testing or metrics. Their sole purpose is to enhance AI conversations by supplying relevant contextual knowledge at the right moment. Treat them as documentation/prompt engineering artifacts.

      For more, see the [rule index](mdc:.cursor/rules/00-rule-index.mdc) and [domain knowledge](mdc:docs/memory/domain-knowledge.md).

      ---
      ## Step-by-Step Rule Creation Process
      1. **Identify the Need**: What guidance is missing? Check the [rule index](mdc:.cursor/rules/00-rule-index.mdc) to avoid duplication.
      2. **Define the Scope**: What files, patterns, or contexts should trigger the rule?
      3. **Choose the Application Type**: See "Rule Application Types" below.
      4. **Plan the Structure**: Outline the main sections (see templates below).
      5. **Create the Rule File**: Place it in `.cursor/rules/` using kebab-case (e.g., `typescript-patterns.mdc`).
      6. **Add Frontmatter**: See "Frontmatter Explained" below.
      7. **Write the Rule Content**: Use the template for your rule type. Include actionable guidance, examples, and cross-references.
      8. **Add Metadata**: At the end of the `<rule>` block, add a metadata section (see below).
      9. **Test the Rule**: Open relevant files and queries to ensure the rule triggers as intended.
      10. **Update the Rule Index**: Add or update the entry in [00-rule-index.mdc](mdc:.cursor/rules/00-rule-index.mdc).
      11. **Review and Iterate**: Get feedback and refine as needed.

      ---
      ## Rule Application Types
      Cursor rules can be activated in four ways. Choose the most appropriate type:

      1. **Auto-Attached**: Activated by file patterns (e.g., `*.ts`). Use for file-type or language-specific guidance.
      2. **Agent-Requested**: Activated by AI when relevant to the conversation. Use for workflows, processes, or general guidance.
      3. **Always-Applied**: Active in all conversations. Use sparingly for universal standards.
      4. **Manual**: Only included when explicitly requested. Use for highly specialized or rare guidance.

      See [Rule Application Types](mdc:docs/memory/rule-application-types.md) for detailed definitions, configuration, best practices, and a decision flow chart.

      ---
      ## Frontmatter Explained
      Every rule must start with YAML frontmatter:
      ```yaml
      ---
      description: ACTION when TRIGGER to OUTCOME
      globs: pattern1, pattern2 # For auto-attached rules
      alwaysApply: [true|false]
      ---
      ```
      - **description**: Use the "VERB when CONTEXT to OUTCOME" pattern. Approved verbs: FOLLOW, APPLY, USE, ALWAYS USE. See [description standardization](mdc:docs/memory/cursor-rule-descriptions.md).
      - **globs**: Comma-separated file patterns for auto-attached rules. Omit for agent-requested/manual/always-applied unless needed.
      - **alwaysApply**: `true` for always-applied, `false` otherwise.
      - **Editing**: Use terminal commands or `sed` for reliable editing. See [frontmatter guidelines](mdc:docs/memory/cursor-rule-frontmatter.md).

      ---
      ## Rule Content Structure
      After frontmatter, include:
      1. **Title**: Main heading for the rule
      2. **<rule> Block**: Contains:
         - `name`: Unique snake_case identifier
         - `description`: Brief summary (do not duplicate frontmatter)
         - `filters`: When the rule applies
         - `actions`: What happens when triggered
         - `examples`: Sample interactions
         - `metadata`: See below
      3. **Related Rules**: (Optional) List with `mdc:` links

      ---
      ## Example Templates
      ### Auto-Attached Rule
      ```markdown
      ---
      description: APPLY when WRITING TypeScript to MAINTAIN code quality standards
      globs: *.ts, *.tsx
      alwaysApply: false
      ---
      # TypeScript Patterns
      <rule>
      name: typescript_patterns
      description: Best practices for TypeScript code organization and patterns
      filters:
        - type: file_extension
          pattern: "\\.ts$|\\.tsx$"
      actions:
        - type: suggest
          message: |
            // Guidance here
      examples:
        - input: |
            How should I structure my TypeScript file?
          output: |
            // Example answer demonstrating TypeScript structure guidance
            "Based on our TypeScript standards, you should place interfaces at the top..."
      metadata:
        priority: high
        version: 1.0
        tags:
          - typescript
          - coding-standards
        changelog:
          - version: 1.0
            changes:
              - Initial version
      </rule>
      ```
      ### Agent-Requested Rule
      ```markdown
      ---
      description: USE when ANALYZING repository structure to LOCATE specific code
      alwaysApply: false
      ---
      # Repository Analysis
      <rule>
      name: repo_analyzer
      description: Guidelines for analyzing the repository structure
      filters:
        - type: message
          pattern: "(?i)(analyze|structure|repo)"
      actions:
        - type: suggest
          message: |
            // Guidance here
      examples:
        - input: |
            How do I find all config files?
          output: |
            // Example answer showing repository analysis guidance
            "To find config files, check the `packages/*/config` directories..."
      metadata:
        priority: medium
        version: 1.0
        tags:
          - repository
        changelog:
          - version: 1.0
            changes:
              - Initial version
      </rule>
      ```
      ### Always-Applied Rule
      ```markdown
      ---
      description: USE when LINKING between files to ENSURE proper navigation
      alwaysApply: true
      ---
      # Cross-Reference Syntax
      <rule>
      name: cross_reference_syntax
      description: Proper syntax for links and references in all documentation
      filters:
        - type: file_extension
          pattern: "\\.mdc$"
      actions:
        - type: suggest
          message: |
            // Guidance here
      examples:
        - input: |
            How do I link to another rule?
          output: |
            // Example answer explaining cross-reference syntax
            "Use the `[rule-name](mdc:.cursor/rules/rule-name.mdc)` syntax..."
      metadata:
        priority: high
        version: 1.0
        tags:
          - documentation
        changelog:
          - version: 1.0
            changes:
              - Initial version
      </rule>
      ```
      ### Manual Rule
      ```markdown
      ---
      description: FOLLOW when MIGRATING database schemas to PREVENT data loss
      ---
      # Database Migration Guide
      <rule>
      name: database_migration_guide
      description: Step-by-step guidance for safe database schema migrations
      filters:
        - type: message
          pattern: "(?i)(migrate|database)"
      actions:
        - type: suggest
          message: |
            // Guidance here
      examples:
        - input: |
            How do I migrate safely?
          output: |
            // Example answer providing migration steps
            "To migrate safely, first backup your database, then..."
      metadata:
        priority: low
        version: 1.0
        tags:
          - migration
        changelog:
          - version: 1.0
            changes:
              - Initial version
      </rule>
      ```

      ---
      ## Best Practices for Rule Creation
      - Use the approved description pattern and verbs.
      - Be specific and actionable in guidance.
      - Include at least one realistic example.
      - Use cross-references to related rules/files with `mdc:` syntax.
      - Keep rules focused on a single topic.
      - Test glob patterns and filters for correct activation.
      - Use terminal commands for frontmatter edits.
      - Update the rule index after changes.
      - Review and update rules regularly.
      - See [user preferences](mdc:docs/memory/user-preferences.md) for more.

      ---
      ## Common Pitfalls and How to Avoid Them
      - **Misconfigured frontmatter**: Use the correct pattern and field names.
      - **Vague or generic descriptions**: Use the approved pattern and be specific.
      - **Missing or poor examples**: Always include at least one clear example.
      - **Improper file placement**: All rules must be in `.cursor/rules/`.
      - **Quoted glob patterns**: Use unquoted patterns (e.g., `globs: *.ts` not `globs: "*.ts"`).
      - **Forgetting to update the rule index**: Always update [00-rule-index.mdc](mdc:.cursor/rules/00-rule-index.mdc).
      - **Not testing rule activation**: Open relevant files and queries to verify.
      - **Not using `mdc:` links**: All cross-references must use `mdc:` syntax.
      - **Neglecting version metadata**: Always update the version and changelog.

      ---
      ## Writing Effective Rule Descriptions
      - Use the "VERB when CONTEXT to OUTCOME" pattern.
      - Approved verbs: FOLLOW, APPLY, USE, ALWAYS USE.
      - The description must be in the frontmatter, not duplicated in the `<rule>` block.
      - See [description standardization](mdc:docs/memory/cursor-rule-descriptions.md) for more.

      ---
      ## Cross-References and Related Rules
      - Use `[display text](mdc:path/to/file)` for all links.
      - Add a "Related Rules" section if relevant.
      - See [cross-reference guidelines](mdc:.cursor/rules/cursor-rule-cross-references.mdc).

      ---
      ## Versioning and Metadata
      - Add a `metadata` block at the end of the `<rule>` element.
      - Use semantic versioning (MAJOR.MINOR.PATCH).
      - **priority**: Indicates rule importance (high, medium, low).
      - **tags**: Keywords for categorization and search.
      - **changelog**: Track changes across versions.

      ---
      ## Related Rules

      - [00-rule-index](mdc:.cursor/rules/00-rule-index.mdc): Where to register new rules.
      - [cursor-rules-location](mdc:.cursor/rules/cursor-rules-location.mdc): Where to place rule files.
      - [cursor-rule-cross-references](mdc:.cursor/rules/cursor-rule-cross-references.mdc): How to link between rules/files.
      - [Rule Application Types](mdc:docs/memory/rule-application-types.md): Detailed guidance on choosing the right activation mode.
      - [Rule Description Standardization](mdc:docs/memory/cursor-rule-descriptions.md): How to write effective rule descriptions.
      - [Rule Frontmatter Guidelines](mdc:docs/memory/cursor-rule-frontmatter.md): Specifics on configuring frontmatter.

metadata:
  priority: high
  version: 1.6
  tags:
    - cursor-rules
    - documentation
    - process
  changelog:
    - version: 1.6
      changes:
        - Major rewrite: clarified step-by-step process, added templates for all rule types, expanded best practices, pitfalls, and checklist, improved frontmatter and application type guidance, and added more cross-references.
    - version: 1.5
      changes:
        - Added "ACTION when TRIGGER to OUTCOME" pattern for description fields
        - Updated examples and documentation to reflect the new pattern
        - Standardized frontmatter description format
    - version: 1.4
      changes:
        - Added best practices for frontmatter creation and editing
        - Added warnings about edit_file tool issues with frontmatter
        - Added guidance for using terminal commands for frontmatter operations
        - Added reference to cursor-rule-frontmatter.md for detailed troubleshooting
    - version: 1.3
      changes:
        - Added Rule Categories section to help creators select appropriate categories
        - Added Updating the Rule Index section with guidance on maintaining the rule index
        - Added cross-references to related rules for better integration
    - version: 1.2
      changes:
        - Added subsection on renaming rule files with step-by-step guidelines
        - Included best practices for preserving references when renaming files
    - version: 1.1
      changes:
        - Added section on rule metadata and version control
        - Added link to version control template
        - Updated rule template to include metadata section
    - version: 1.0
      changes:
        - Initial version
</rule>
