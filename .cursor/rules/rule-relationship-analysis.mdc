---
description:
globs:
alwaysApply: false
---
# Rule Relationship Analysis

Guidelines for analyzing Cursor rules to identify and document relationships with other rules, files, and concepts.

<rule>
name: rule_relationship_analysis
description: Process for systematically analyzing Cursor rules to identify relationships for cross-references
filters:
  - type: message
    pattern: "(?i)(rule (analysis|relationship|connection)|cross-reference|relate rules|rule dependency)"
  - type: file_path
    pattern: "\\.cursor/rules/.*\\.mdc$"
  - type: content
    pattern: "(?i)(relates to|references|connects with|depends on|uses|interacts with)"

actions:
  - type: suggest
    message: |
      # Rule Relationship Analysis Process

      This process helps identify and document relationships between Cursor rules, enabling effective cross-references and navigation.

      ## Analysis Steps

      ### 1. Initial Rule Content Analysis

      Begin by thoroughly examining the rule's content:

      ```bash
      # Examine rule content
      cat .cursor/rules/rule-name.mdc
      ```

      Key elements to analyze:
      - **Rule description**: What problem does it solve?
      - **Rule filters**: When is it activated?
      - **Rule actions**: What suggestions/guidance does it provide?
      - **Examples**: What real-world applications are shown?
      - **Related Rules section**: What connections are already documented?
      - **File/Path references**: What files does it interact with?
      - **Tool references**: What tools/commands does it mention?
      - **Concepts**: What key concepts/principles does it define?

      ### 2. Identify Explicit Relationships

      Look for directly stated relationships:
      - **Related Rules section**: Rules explicitly mentioned
      - **mdc: links**: Files directly referenced
      - **Dependent concepts**: Tools or processes referenced

      ### 3. Identify Implicit Relationships

      Identify less obvious connections:
      - **Shared concepts**: Rules addressing related topics
      - **Complementary functionality**: Rules that work together
      - **Workflow integrations**: How rules connect in user workflows
      - **Tool/command overlaps**: Rules using similar tools
      - **File type interactions**: Rules applying to similar file types

      ### 4. AI-Assisted Review

      Use an AI assistant to review your analysis:

      ```
      Gemini review prompt:
      "Review my analysis of the [rule-name] rule: [your analysis].

      The [rule-name] rule provides [brief description]. It has relationships with:
      - [rule1] (reason for relationship)
      - [rule2] (reason for relationship)
      - [other relationships]

      Is this analysis complete and accurate? Have I missed any important relationships or details?"
      ```

      ### 5. Document Relationships

      Use this consistent format to document relationships:

      ```markdown
      ### [rule-name]

      - Relates to: `[rule1]` (reason for relationship)
      - Relates to: `[rule2]` (reason for relationship)
      - Relates to: `[rule3]` (reason for relationship)
      - Interacts with files: [file patterns or specific files]
      - Uses tools/commands: [tools or commands mentioned]
      ```

      Note the key relationship types:
      - **Relates to**: General connection to another rule
      - **Depends on**: Requires another rule to function
      - **References**: Mentions but doesn't require
      - **Extends**: Builds upon another rule
      - **Interacts with files**: Specific files it operates on
      - **Uses tools/commands**: External tools referenced

      ### 6. Update Cross-References

      Once relationships are identified, update both rules with proper cross-references:

      ```markdown
      ## Related Rules

      - [rule-name](mdc:.cursor/rules/rule-name.mdc): Brief explanation of relationship.
      ```

      Ensure bidirectional references for key relationships - if Rule A depends on Rule B, both should reference each other.

      ## Relationship Types

      When documenting relationships, consider these common patterns:

      1. **Foundation/Building Block**: Rule A provides fundamental concepts that Rule B relies on
         ```
         - Relates to: `typescript-patterns` (core TypeScript rules applied by this config)
         ```

      2. **Workflow Integration**: Rule fits into a larger process defined by another rule
         ```
         - Relates to: `development-workflow` (defines a key step in the overall process)
         ```

      3. **Tool Relationship**: Rule uses tools/commands defined in another rule
         ```
         - Relates to: `mcp-tools-usage` (uses Sequential Thinking tool defined here)
         ```

      4. **File Type Relationship**: Rules that apply to the same file types
         ```
         - Relates to: `eslint-config-usage` (both apply to TypeScript files)
         ```

      5. **Bidirectional Dependencies**: Rules that mutually depend on each other
         ```
         - Relates to: `memory-management` (provides context storage referenced by both)
         ```

      ## AI Review Template

      ```
      Analyze the [rule-name] rule and identify its relationships:

      1. Explicit relationships: [Rules directly referenced]
      2. Implicit relationships: [Rules with shared concepts/purposes]
      3. File interactions: [Files/patterns it operates on]
      4. Tool usage: [Tools/commands referenced]

      Based on this analysis, here are the identified relationships:
      - Relates to: `[rule1]` (reason)
      - Relates to: `[rule2]` (reason)
      [etc.]

      Is this analysis complete? What relationships am I missing?
      ```

      ## Related Rules

      - [cursor-rules-creation](mdc:.cursor/rules/cursor-rules-creation.mdc): Defines the structure and format of Cursor rules.
      - [ai-agile-workflow](mdc:.cursor/rules/ai-agile-workflow.mdc): The task-based workflow this analysis process fits within.
      - [repo-analyzer](mdc:.cursor/rules/repo-analyzer.mdc): General approach for analyzing repository contents.
      - [rule-acknowledgement](mdc:.cursor/rules/rule-acknowledgement.mdc): How to acknowledge rule relevance in responses.
      - [00-rule-index](mdc:.cursor/rules/00-rule-index.mdc): The index that tracks all rules and their relationships.

examples:
  - input: |
      I need to analyze the typescript-patterns rule to identify its relationships
    output: |
      I'll help you analyze the typescript-patterns rule to identify its relationships with other rules. Follow this process:

      ### 1. Initial Content Analysis

      First, let's examine the rule content:
      ```bash
      cat .cursor/rules/typescript-patterns.mdc
      ```

      I'll analyze:
      - What TypeScript practices it defines
      - Which file types it applies to
      - What concepts it covers (type safety, interfaces, etc.)
      - Tools or configurations it references
      - Already listed related rules

      ### 2. Identify Explicit Relationships

      Looking for directly stated connections:
      - Any rules mentioned in its "Related Rules" section
      - Any mdc: links to other files
      - References to specific tools or configurations

      ### 3. Identify Implicit Relationships

      Now for less obvious connections:
      - Rules for tools using TypeScript (eslint-config, prettier-config)
      - Rules for processes involving TypeScript code
      - Rules that might apply to the same files

      ### 4. AI-Assisted Review

      I'll formulate a review request for an AI assistant:

      "Review my analysis of the typescript-patterns rule: The typescript-patterns rule defines best practices for TypeScript code in this repository. It covers interfaces vs types, null handling, naming conventions, and typing patterns. It has relationships with:
      - eslint-config-usage (enforces many of these patterns via linting)
      - api-design-standards (applies these patterns to public APIs)
      - testing-practices (guides typing test fixtures)
      - code-review-standards (reviewers check for adherence to these patterns)

      Is this analysis complete and accurate? Have I missed any important relationships?"

      ### 5. Document Relationships

      After the review, I'll document the relationships in this format:

      ```markdown
      ### typescript-patterns

      - Relates to: `eslint-config-usage` (many patterns enforced via ESLint)
      - Relates to: `api-design-standards` (applies patterns to public APIs)
      - Relates to: `testing-practices` (guides typing test fixtures)
      - Relates to: `code-review-standards` (reviewers check for adherence)
      - Interacts with files: `.ts`, `.tsx`, `.d.ts` files across the repo
      - Uses tools: TypeScript compiler, ESLint rules
      ```

      ### 6. Update Cross-References

      Finally, we should update the typescript-patterns rule and related rules to include proper cross-references using the mdc: syntax.

      Would you like me to proceed with this analysis, or would you like guidance on analyzing a different rule?

  - input: |
      What relationship types should I consider when analyzing the date-consistency-enforcer rule?
    output: |
      When analyzing the date-consistency-enforcer rule, consider these relationship types:

      ### Foundation/Building Block Relationships
      - Does the rule provide fundamental date handling that other rules rely on?
      - Example: `memory-management` might depend on date-consistency-enforcer for timestamp formatting.

      ### Tool Relationship
      - Does the rule define or use specific tools for date handling?
      - Example: It might reference `mcp-tools-usage` for time-related MCP tools.

      ### Workflow Integration
      - How does the rule fit into larger processes?
      - Example: `ai-agile-workflow` might use date formatting for task IDs.

      ### File Type Relationship
      - What types of files does it apply to?
      - Example: May apply to memory files, task files, etc.

      ### Bidirectional Dependencies
      - Rules that both provide something to and consume something from this rule.
      - Example: `memory-management` might both use date standards and provide context for when to apply them.

      When documenting these, follow the structured format:
      ```markdown
      ### date-consistency-enforcer

      - Relates to: `memory-management` (ensures consistent date formats in memory files)
      - Relates to: `ai-agile-workflow` (provides date format for task IDs)
      - Relates to: `mcp-tools-usage` (references MCP time tools)
      - Interacts with files: Memory files, task files, plan files
      - Uses tools: mcp_time_get_current_time, date command
      ```

      For a thorough analysis, consider both the direct references (explicit) and conceptual connections (implicit) to build a comprehensive relationship map.

  - input: |
      Help me format the AI review request for analyzing the rule-acknowledgement rule
    output: |
      Here's a formatted AI review request for analyzing the rule-acknowledgement rule:

      ```
      Review my analysis of the rule-acknowledgement rule:

      The rule-acknowledgement rule enforces explicit acknowledgment of which rules are being applied in responses. It defines a structured format for acknowledging relevant rules that are being followed, noting rules that were considered but deemed not relevant, and explaining implementation decisions. The rule has relationships with:

      - 00-rule-index (provides the master list of rules to consider)
      - cursor-rules-creation (guides the creation of the rules being acknowledged)
      - monorepo-structure (helps navigate to find all relevant rules)
      - all other rules (potentially) as it defines how to acknowledge their application

      The rule activates on response_start events and content matching implementation-related terms, and it applies globally to ensure transparent rule application.

      Is this analysis complete and accurate? Have I missed any important relationships or details? Are there other rules that specifically interact with rule-acknowledgement in ways I should highlight?
      ```

      This format provides:
      1. A clear description of what the rule does
      2. The key relationships you've already identified
      3. When/how the rule is activated
      4. Open-ended questions for the AI to consider additional relationships

      The request is structured to get feedback not just on accuracy but also on completeness, which helps ensure you're not missing important relationships. It specifically asks about other rules that might interact with rule-acknowledgement, which could reveal connections you hadn't considered.

      After receiving the AI's review, you can format the final relationship documentation using the standard template:

      ```markdown
      ### rule-acknowledgement

      - Relates to: `00-rule-index` (provides the master list of rules to consider)
      - Relates to: `cursor-rules-creation` (guides the creation of rules being acknowledged)
      - Relates to: `[other rules identified in review]` (reasons)
      - Interacts with files: Response outputs, potentially all files (as responses can be about any file)
      ```

metadata:
  priority: high
  version: 1.0
  tags:
    - rule-management
    - cross-references
    - documentation
    - analysis
</rule>
